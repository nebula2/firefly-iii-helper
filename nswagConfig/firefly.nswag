{
  "runtime": "Net50",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "openapi: 3.0.0\nservers:\n  - description: Firefly III demo site\n    url: https://demo.firefly-iii.org/\ninfo:\n  title: Firefly III API\n  description: |\n    This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below.\n  version: \"1.5.0\"\n  contact:\n    name: James Cole\n    email: james@firefly-iii.org\n    url: https://firefly-iii.org\n  license:\n    name: AGPLv3\n    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'\ntags:\n- name: about\n  description: General system information, versions, and the currently logged in user.\n- name: accounts\n  description: All asset, expense and other accounts (and the metadata) together with\n    related transactions, piggy banks and other objects.\n- name: attachments\n  description: All attachments of the authenticated user, including up- and downloading\n    of the files.\n- name: autocomplete\n  description: All auto-complete endpoints.\n- name: available_budgets\n  description: The total available amount that is available for budgeting every period.\n- name: bills\n  description: All bills by the user.\n- name: budgets\n  description: Manage all the user&#039;s budgets\n- name: charts\n  description: This endpoint delivers optimised data for charts and graphics.\n- name: categories\n  description: Manage all the user&#039;s categories\n- name: configuration\n  description: Manage the global Firefly III configuration\n- name: currencies\n  description: Manage all currencies in the system, disable and enable them or add\n    new ones.\n- name: import\n  description: Manage and run imports.\n- name: links\n  description: Manage links between transactions, and manage the type of links available.\n- name: piggy_banks\n  description: Control all of the user&#039;s piggy banks, including money management\n- name: preferences\n  description: Manage the user&#039;s preferences, including some hidden ones.\n- name: recurrences\n  description: Manage the user&#039;s recurring transactions, trigger the creation of transactions\n    and manage the settings.\n- name: rules\n  description: Manage all of the user&#039;s rules and trigger the execution of rules.\n- name: rule_groups\n  description: Manage all of the user&#039;s groups of rules and trigger the execution\n    of entire groups.\n- name: search\n  description: Search through the user&#039;s financial data.\n- name: summary\n  description: Endpoint for sums, lists of numbers and other processed information.\n- name: tags\n  description: Manage all the user&#039;s tags.\n- name: transactions\n  description: Manage all the user&#039;s transactions.\n- name: users\n  description: Manage the users registered within Firefly III.\n- name: webhooks\n  description: Manage the user&#039;s webhooks.\n\npaths:\n  /api/v1/about:\n    get:\n      tags:\n        - about\n      operationId: getAbout\n      summary: System information end point.\n      description: |\n        Returns general system information and versions of the (supporting) software.\n      responses:\n        '200':\n          description: The available system information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemInfo'\n  /api/v1/about/user:\n    get:\n      tags:\n        - about\n      summary: Currently authenticated user endpoint.\n      operationId: getCurrentUser\n      description: |\n        Returns the currently authenticated user.\n      responses:\n        '200':\n          description: The user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSingle'\n  /api/v1/accounts:\n    get:\n      tags:\n        - accounts\n      summary: List all accounts.\n      description: |\n        This endpoint returns a list of all the accounts owned by the authenticated user.\n      operationId: listAccount\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is per 50 items.\n        required: false\n        schema:\n          type: integer\n          format: int32\n          example: 1\n      - in: query\n        name: date\n        description: |\n          A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.\n        required: false\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: type\n        description: Optional filter on the account type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/AccountTypeFilter'\n      responses:\n        '200':\n          description: A list of accounts\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountArray'\n    post:\n      tags:\n        - accounts\n      summary: Create new account.\n      operationId: storeAccount\n      description: Creates a new account. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).\n      responses:\n        '200':\n          description: 'New account stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Account'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Account'\n        description: JSON array with the necessary account information or key=value pairs. See the model for the exact specifications.\n        required: true\n  /api/v1/accounts/{id}:\n    get:\n      tags:\n      - accounts\n      summary: Get single account.\n      description: |\n        Returns a single account by its ID.\n      operationId: getAccount\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the account.\n      - in: query\n        name: date\n        description: |\n          A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.\n        required: false\n        schema:\n          type: string\n          format: date\n      responses:\n        '200':\n          description: 'The requested account'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountSingle'\n        '404':\n          description: Account not found\n    put:\n      summary: Update existing account.\n      description: |\n        Used to update a single account. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory.\n      operationId: updateAccount\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the account.\n      tags:\n        - accounts\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Account'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Account'\n        description: JSON array or formdata with updated account information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated account stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      summary: Permanently delete account.\n      description: |\n        Will permanently delete an account. Any associated transactions and piggy banks are ALSO deleted. Cannot be recovered from.\n      operationId: deleteAccount\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the account.\n      tags:\n        - accounts\n      responses:\n        '204':\n          description: Account deleted\n        '404':\n          description: No such account\n  /api/v1/accounts/{id}/piggy_banks:\n    get:\n      tags:\n        - accounts\n      summary: List all piggy banks related to the account.\n      description: |\n        This endpoint returns a list of all the piggy banks connected to the account.\n      operationId: listPiggyBankByAccount\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the account.\n      - in: query\n        name: page\n        description: Page number. The default pagination is per 50 items.\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          description: A list of piggy banks\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PiggyBankArray'\n  /api/v1/accounts/{id}/transactions:\n    get:\n      tags:\n        - accounts\n      summary: List all transactions related to the account.\n      description: |\n        This endpoint returns a list of all the transactions connected to the account.\n      operationId: listTransactionByAccount\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the account.\n      - in: query\n        name: page\n        description: Page number. The default pagination is per 50 items.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: limit\n        description: Limits the number of results on one page.\n        required: false\n        schema:\n          type: integer\n          example: 5\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned.\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/accounts/{id}/attachments:\n    get:\n      summary: Lists all attachments.\n      description: Lists all attachments.\n      operationId: listAttachmentByAccount\n      tags:\n        - accounts\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the account.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentArray'\n        '404':\n          description: No such account.\n  /api/v1/attachments:\n    get:\n      summary: List all attachments.\n      description: |\n        This endpoint lists all attachments.\n      operationId: listAttachment\n      tags:\n        - attachments\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of attachments.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentArray'\n    post:\n      summary: Store a new attachment.\n      description: |\n        Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object.\n      operationId: storeAttachment\n      tags:\n        - attachments\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attachment'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Attachment'\n        description: \"JSON array or key=value pairs with the necessary attachment information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New attachment stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/attachments/{id}:\n    get:\n      summary: Get a single attachment.\n      description: |\n        Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below).\n      operationId: getAttachment\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the attachment.\n      tags:\n        - attachments\n      responses:\n        '200':\n          description: 'The requested attachment'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentSingle'\n        '404':\n          description: Attachment not found\n    put:\n      operationId: updateAttachment\n      tags:\n        - attachments\n      summary: Update existing attachment.\n      description: |\n        Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the attachment.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attachment'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Attachment'\n        description: JSON array with updated attachment information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated attachment stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteAttachment\n      summary: Delete an attachment.\n      description: |\n        With this endpoint you delete an attachment, including any stored file data.\n      tags:\n        - attachments\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the single.\n      responses:\n        '204':\n          description: Attachment deleted.\n        '404':\n          description: No such attachment\n  /api/v1/attachments/{id}/download:\n    get:\n      summary: Download a single attachment.\n      description: |\n        This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\".\n      operationId: downloadAttachment\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the attachment.\n      tags:\n        - attachments\n      responses:\n        '200':\n          description: 'The requested attachment'\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: File not found\n  /api/v1/attachments/{id}/upload:\n    post:\n      summary: Upload an attachment.\n      description: |\n        Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data.\n      operationId: uploadAttachment\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the attachment.\n      tags:\n        - attachments\n      responses:\n        '204':\n          description: 'Upload was a success'\n        '404':\n          description: File not found\n        '422':\n          description: Upload invalid or empty file.\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n  /api/v1/autocomplete/accounts:\n    get:\n      tags:\n        - autocomplete\n      operationId: getAccountsAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      - in: query\n        name: date\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"2020-09-17\"\n        description: \"For asset accounts, returns the balance on this date.\"\n      - in: query\n        name: type\n        description: Optional filter on the account type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/AccountTypeFilter'\n      summary: All accounts of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of accounts with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteAccountArray'\n  /api/v1/autocomplete/bills:\n    get:\n      tags:\n        - autocomplete\n      operationId: getBillsAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All bills of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of bills with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteBillArray'\n  /api/v1/autocomplete/budgets:\n    get:\n      tags:\n        - autocomplete\n      operationId: getBudgetsAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All budgets of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of budgets with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteBudgetArray'\n  /api/v1/autocomplete/categories:\n    get:\n      tags:\n        - autocomplete\n      operationId: getCategoriesAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All categories of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of categories with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteCategoryArray'\n  /api/v1/autocomplete/currencies:\n    get:\n      tags:\n        - autocomplete\n      operationId: getCurrenciesAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All currencies of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of currencies with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteCurrencyArray'\n  /api/v1/autocomplete/currencies-with-code:\n    get:\n      tags:\n        - autocomplete\n      operationId: getCurrenciesCodeAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All currencies of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of currencies with very basic information and the currency code between brackets.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteCurrencyCodeArray'\n  /api/v1/autocomplete/object-groups:\n    get:\n      tags:\n        - autocomplete\n      operationId: getObjectGroupsAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All object groups of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of object groups with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteObjectGroupArray'\n  /api/v1/autocomplete/piggy-banks:\n    get:\n      tags:\n        - autocomplete\n      operationId: getPiggiesAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All piggy banks of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of piggy banks with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompletePiggyArray'\n  /api/v1/autocomplete/piggy-banks-with-balance:\n    get:\n      tags:\n        - autocomplete\n      operationId: getPiggiesBalanceAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All piggy banks of the user returned in a basic auto-complete array complemented with balance information.\n      responses:\n        '200':\n          description: A list of piggy banks with very basic balance information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompletePiggyBalanceArray'\n  /api/v1/autocomplete/rules:\n    get:\n      tags:\n        - autocomplete\n      operationId: getRulesAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All rules of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of rules with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteRuleArray'\n  /api/v1/autocomplete/rule-groups:\n    get:\n      tags:\n        - autocomplete\n      operationId: getRuleGroupsAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All rule groups of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of rule groups with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteRuleGroupArray'\n  /api/v1/autocomplete/tags:\n    get:\n      tags:\n        - autocomplete\n      operationId: getTagAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All tags of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of tags with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteTagArray'\n  /api/v1/autocomplete/transactions:\n    get:\n      tags:\n        - autocomplete\n      operationId: getTransactionsAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All transaction descriptions of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of transaction descriptions with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteTransactionArray'\n  /api/v1/autocomplete/transactions-with-id:\n    get:\n      tags:\n        - autocomplete\n      operationId: getTransactionsIDAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All transactions, complemented with their ID, of the user returned in a basic auto-complete array.\n      responses:\n        '200':\n          description: A list of transactions with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteTransactionIDArray'\n  /api/v1/autocomplete/transaction-types:\n    get:\n      tags:\n        - autocomplete\n      operationId: getTransactionTypesAC\n      parameters:\n      - in: query\n        name: query\n        description: The autocomplete search query.\n        required: false\n        schema:\n          type: string\n          format: string\n        example: \"str\"\n      - in: query\n        name: limit\n        description: The autocomplete number of items returned\n        required: false\n        schema:\n          type: integer\n          format: int32\n        example: 10\n      summary: All transaction types returned in a basic auto-complete array. English only.\n      responses:\n        '200':\n          description: A list of transaction types with very basic information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutocompleteTransactionTypeArray'\n  \n  /api/v1/available_budgets:\n    get:\n      summary: List all available budget amounts.\n      description: |\n        Firefly III allows users to set the amount that is available to be budgeted in so-called \"available budgets\". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set.\n      operationId: listAvailableBudget\n      tags:\n        - available_budgets\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      responses:\n        '200':\n          description: A list of available budget amounts.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableBudgetArray'\n    post:\n      summary: Store a new available budget\n      description: |\n        Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeAvailableBudget\n      tags:\n        - available_budgets\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AvailableBudget'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/AvailableBudget'\n        description: \"JSON array or key=value pairs with the necessary available budget information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New available budget stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableBudgetSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/available_budgets/{id}:\n    get:\n      summary: Get a single available budget.\n      description: Get a single available budget, by ID.\n      operationId: getAvailableBudget\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the available budget.\n      tags:\n        - available_budgets\n      responses:\n        '200':\n          description: 'The requested available budget'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableBudgetSingle'\n        '404':\n          description: AvailableBudget not found\n    put:\n      operationId: updateAvailableBudget\n      tags:\n        - available_budgets\n      description: Update existing available budget.\n      summary: Update existing available budget, to change for example the date range of the amount or the amount itself.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the object.X\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AvailableBudget'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/AvailableBudget'\n        description: JSON array or form value with updated available budget information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated available budget stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableBudgetSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteAvailableBudget\n      description: Delete an available budget. Not much more to say.\n      summary: Delete an available budget.\n      tags:\n        - available_budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the available budget.\n      responses:\n        '204':\n          description: Available budget deleted.\n        '404':\n          description: No such available budget.\n  \n  /api/v1/bills:\n    get:\n      summary: List all bills.\n      description: This endpoint will list all the user's bills.\n      operationId: listBill\n      tags:\n        - bills\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      responses:\n        '200':\n          description: A list of bills\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillArray'\n    post:\n      summary: Store a new bill\n      description: Creates a new bill. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeBill\n      tags:\n        - bills\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Bill'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Bill'\n        description: \"JSON array or key=value pairs with the necessary bill information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New bill stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/bills/{id}:\n    get:\n      summary: Get a single bill.\n      description: Get a single bill.\n      operationId: getBill\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the bill.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      tags:\n        - bills\n      responses:\n        '200':\n          description: 'The requested bill'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillSingle'\n        '404':\n          description: Bill not found\n    put:\n      operationId: updateBill\n      tags:\n        - bills\n      description: Update existing bill.\n      summary: Update existing bill.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the bill.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Bill'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Bill'\n        description: JSON array or key=value pairs with updated bill information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated bill stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteBill\n      description: Delete a bill. This will not delete any associated rules. Will not remove associated transactions. WILL remove all associated attachments.\n      summary: Delete a bill.\n      tags:\n        - bills\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the bill.\n      responses:\n        '204':\n          description: Bill deleted.\n        '404':\n          description: No such bill\n  /api/v1/bills/{id}/attachments:\n    get:\n      summary: List all attachments uploaded to the bill.\n      description: This endpoint will list all attachments linked to the bill.\n      operationId: listAttachmentByBill\n      tags:\n        - bills\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the bill.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentArray'\n  /api/v1/bills/{id}/rules:\n    get:\n      summary: List all rules associated with the bill.\n      description: This endpoint will list all rules that have an action to set the bill to this bill.\n      operationId: listRuleByBill\n      tags:\n        - bills\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the bill.\n      responses:\n        '200':\n          description: A list of rules\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleArray'\n  /api/v1/bills/{id}/transactions:\n    get:\n      summary: List all transactions associated with the  bill.\n      description: This endpoint will list all transactions linked to this bill.\n      operationId: listTransactionByBill\n      tags:\n        - bills\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the bill.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  \n  /api/v1/budgets:\n    get:\n      summary: List all budgets.\n      description: List all the budgets the user has made. If the start date and end date are submitted as well, the \"spent\" array will be updated accordingly.\n      operationId: listBudget\n      tags:\n        - budgets\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      responses:\n        '200':\n          description: A list of budgets.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetArray'\n    post:\n      summary: Store a new budget\n      description: Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeBudget\n      tags:\n        - budgets\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Budget'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Budget'\n        description: \"JSON array or key=value pairs with the necessary budget information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New budget stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/budgets/{id}:\n    get:\n      summary: Get a single budget.\n      description: Get a single budget. If the start date and end date are submitted as well, the \"spent\" array will be updated accordingly.\n      operationId: getBudget\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the requested budget.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to get info on how much the user has spent.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to get info on how much the user has spent.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      tags:\n        - budgets\n      responses:\n        '200':\n          description: 'The requested budget'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetSingle'\n        '404':\n          description: Budget not found.\n    put:\n      operationId: updateBudget\n      tags:\n        - budgets\n      description: Update existing budget. This endpoint cannot be used to set budget amount limits.\n      summary: Update existing budget.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          example: 1\n        description: The ID of the budget.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Budget'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Budget'\n        description: JSON array with updated budget information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated budget stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteBudget\n      description: Delete a budget. Transactions will not be deleted.\n      summary: Delete a budget.\n      tags:\n        - budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          example: 1\n        description: The ID of the budget.\n      responses:\n        '204':\n          description: Budget deleted.\n        '404':\n          description: No such budget\n  \n  /api/v1/budgets/{id}/transactions:\n    get:\n      summary: All transactions to a budget.\n      description: Get all transactions linked to a budget, possibly limited by start and end\n      operationId: listTransactionByBudget\n      tags:\n        - budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the budget.\n      - in: query\n        name: limit\n        description: Limits the number of results on one page.\n        required: false\n        schema:\n          type: integer\n          example: 5\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/budgets/{id}/limits:\n    get:\n      operationId: listBudgetLimitByBudget\n      description: |\n          Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \"spent\" array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself.\n      summary: Get all limits\n      tags:\n        - budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          example: 1\n        description: The ID of the requested budget.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      responses:\n        '200':\n          description: A list of budget limits applicable to this budget.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetLimitArray'\n    post:\n      operationId: storeBudgetLimit\n      description: Store a new budget limit.\n      summary: Store new budget limit.\n      tags:\n        - budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          example: 1\n        description: The ID of the budget.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BudgetLimit'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/BudgetLimit'\n        description: \"JSON array or key=value pairs with the necessary budget information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New budget limit stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetLimitSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/budgets/limits/{id}:\n    get:\n      summary: Get single budget limit.\n      operationId: getBudgetLimit\n      tags:\n        - budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          example: 1\n        description: The ID of the requested budget limit.\n      responses:\n        '200':\n          description: 'The requested budget limit'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetLimitSingle'\n        '404':\n          description: Budget limit not found.\n    put:\n      operationId: updateBudgetLimit\n      tags:\n        - budgets\n      description: Update existing budget limit.\n      summary: Update existing budget limit.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          example: 1\n        description: The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BudgetLimit'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/BudgetLimit'\n        description: JSON array with updated budget limit information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated budget limit stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetLimitSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteBudgetLimit\n      description: Delete a budget limit.\n      summary: Delete a budget limit.\n      tags:\n        - budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          example: 1\n        description: The ID of the requested budget limit.\n      responses:\n        '204':\n          description: Budget limit deleted.\n        '404':\n          description: No such budget limit\n  /api/v1/budgets/limits/{id}/transactions:\n    get:\n      summary: List all transactions by a budget limit ID.\n      description: List all the transactions within one budget limit. The start and end date are dictated by the budget limit.\n      operationId: listTransactionByBudgetLimit\n      tags:\n        - budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          example: 1\n        description: The ID of the requested budget limit.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/budgets/{id}/attachments:\n    get:\n      summary: Lists all attachments.\n      description: Lists all attachments.\n      operationId: listAttachmentByBudget\n      tags:\n        - budgets\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the budget.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentArray'\n        '404':\n          description: No such budget.\n  \n  /api/v1/categories:\n    get:\n      summary: List all categories.\n      description: List all categories.\n      operationId: listCategory\n      tags:\n        - categories\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of categories.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryArray'\n    post:\n      summary: Store a new category\n      description: Creates a new category. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeCategory\n      tags:\n        - categories\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Category'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Category'\n        description: \"JSON array or key=value pairs with the necessary category information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New category stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategorySingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/categories/{id}:\n    get:\n      summary: Get a single category.\n      description: Get a single category.\n      operationId: getCategory\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the category.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to show spent and earned info.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to show spent and earned info.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      tags:\n        - categories\n      responses:\n        '200':\n          description: 'The requested category'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategorySingle'\n        '404':\n          description: Category not found\n    put:\n      operationId: updateCategory\n      tags:\n        - categories\n      description: Update existing category.\n      summary: Update existing category.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the category.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Category'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Category'\n        description: JSON array with updated category information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated category stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategorySingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteCategory\n      description: Delete a category. Transactions will not be removed.\n      summary: Delete a category.\n      tags:\n        - categories\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the category.\n      responses:\n        '204':\n          description: Category deleted.\n        '404':\n          description: No such category.\n  /api/v1/categories/{id}/transactions:\n    get:\n      summary: List all transactions in a category.\n      description: List all transactions in a category, optionally limited to the date ranges specified.\n      operationId: listTransactionByCategory\n      tags:\n        - categories\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the category.\n      - in: query\n        name: page\n        description: Page number. The default pagination is per 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to limit the result list.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to limit the result list.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/categories/{id}/attachments:\n    get:\n      summary: Lists all attachments.\n      description: Lists all attachments.\n      operationId: listAttachmentByCategory\n      tags:\n        - categories\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the category.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentArray'\n        '404':\n          description: No such category.\n  \n  /api/v1/chart/ab/overview/{id}:\n    get:\n      tags:\n        - charts\n      summary: Dashboard chart with an overview of the available budget.\n      description: |\n        This endpoint returns the data required to generate a pie chart for the available budget.\n      operationId: getChartABOverview\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the available budget.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      responses:\n        '200':\n          description: Pie chart oriented chart information. Check out the model for more details. Each entry is a piece of the pie in the chart.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChartLine'\n  \n  /api/v1/chart/account/overview:\n    get:\n      tags:\n        - charts\n      summary: Dashboard chart with asset account balance information.\n      description: |\n        This endpoint returns the data required to generate a chart with basic asset account balance information.\n      operationId: getChartAccountOverview\n      parameters:\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      responses:\n        '200':\n          description: Line chart oriented chart information. Check out the model for more details. Each entry is a line (or bar) in the chart.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChartLine'\n  /api/v1/chart/account/expense:\n    get:\n      tags:\n        - charts\n      summary: Dashboard chart with expense account balance information.\n      description: |\n        This endpoint returns the data required to generate a chart that shows the user how much they've spent on their expense accounts.\n      operationId: getChartAccountExpense\n      parameters:\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      responses:\n        '200':\n          description: Bar chart oriented chart information. Check out the model for more details. Each entry is a line (or bar) in the chart.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChartBar'\n  /api/v1/chart/account/revenue:\n    get:\n      tags:\n        - charts\n      summary: Dashboard chart with revenue account balance information.\n      description: |\n        This endpoint returns the data required to generate a chart that shows the user how much they've earned from their revenue accounts.\n      operationId: getChartAccountRevenue\n      parameters:\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      responses:\n        '200':\n          description: Bar chart oriented chart information. Check out the model for more details. Each entry is a line (or bar) in the chart.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChartBar'\n  \n  /api/v1/chart/category/overview:\n    get:\n      tags:\n        - charts\n      summary: Dashboard chart with an overview of the users categories.\n      description: |\n        This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories.\n      operationId: getChartCategoryOverview\n      parameters:\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      responses:\n        '200':\n          description: Bar chart oriented chart information. Check out the model for more details. Each entry is a set of bars in the chart.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChartLine'\n  \n  /api/v1/configuration:\n    get:\n      summary: Get Firefly III system configuration.\n      description: Get system configuration\n      operationId: getConfiguration\n      tags:\n        - configuration\n      responses:\n        '200':\n          description: System configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Configuration'\n  /api/v1/configuration/{name}:\n    post:\n      tags:\n        - configuration\n      summary: Update configuration\n      operationId: setConfiguration\n      description: Set a single config value.\n      parameters:\n      - in: path\n        name: name\n        description: The configuration value name.\n        required: true\n        schema:\n          type: string\n          format: string\n          example: \"single_user_mode\"\n          enum:\n            - is_demo_site\n            - last_update_check\n            - single_user_mode\n      responses:\n        '200':\n          description: 'New config stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Configuration'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      requestBody:\n        description: JSON array with the necessary account information or key=value pairs. See the model for the exact specifications.\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ConfigurationUpdate'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigurationUpdate'\n        required: true\n  \n  /api/v1/currencies:\n    get:\n      summary: List all currencies.\n      description: List all currencies.\n      operationId: listCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of currencies.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrencyArray'\n    post:\n      summary: Store a new currency\n      description: Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeCurrency\n      tags:\n        - currencies\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Currency'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Currency'\n        description: \"JSON array or key=value pairs with the necessary currency information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New currency stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrencySingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/currencies/{code}/enable:\n    post:\n      summary: Enable a single currency.\n      description: Enable a single currency.\n      operationId: enableCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: USD\n        description: The currency code.\n      responses:\n        '204':\n          description: Currency was enabled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrencySingle'\n  /api/v1/currencies/{code}/disable:\n    post:\n      summary: Disable a currency.\n      description: Disable a currency.\n      operationId: disableCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: integer\n          example: GBP\n        description: The currency code.\n      responses:\n        '204':\n          description: Currency was disabled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrencySingle'\n        '409':\n          description: Currency cannot be disabled, because it is still in use.\n  /api/v1/currencies/{code}/default:\n    post:\n      summary: Make currency default currency.\n      description: Make this currency the default currency. If the currency is not enabled, it will be enabled as well.\n      operationId: defaultCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: USD\n        description: The currency code.\n      responses:\n        '204':\n          description: Currency has been made the default currency.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrencySingle'\n  /api/v1/currencies/{code}:\n    get:\n      summary: Get a single currency.\n      description: Get a single currency.\n      operationId: getCurrency\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: USD\n        description: The currency code.\n      tags:\n        - currencies\n      responses:\n        '200':\n          description: 'The requested currency'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrencySingle'\n        '404':\n          description: Currency not found\n    put:\n      operationId: updateCurrency\n      tags:\n        - currencies\n      description: Update existing currency.\n      summary: Update existing currency.\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: EUR\n        description: The currency code.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Currency'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Currency'\n        description: JSON array with updated currency information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated currency stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrencySingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteCurrency\n      description: Delete a currency.\n      summary: Delete a currency.\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: GBP\n        description: The currency code.\n      responses:\n        '204':\n          description: Currency deleted.\n        '404':\n          description: No such currency\n  /api/v1/currencies/{code}/accounts:\n    get:\n      summary: List all accounts with this currency.\n      description: List all accounts with this currency.\n      operationId: listAccountByCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: USD\n        description: The currency code.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: date\n        description: |\n          A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.\n        required: false\n        schema:\n          type: string\n          format: string\n      - in: query\n        name: type\n        description: Optional filter on the account type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/AccountTypeFilter'\n      responses:\n        '200':\n          description: A list of accounts\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountArray'\n  /api/v1/currencies/{code}/available_budgets:\n    get:\n      summary: List all available budgets with this currency.\n      description: List all available budgets with this currency.\n      operationId: listAvailableBudgetByCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: EUR\n        description: The currency code.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of available budgets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableBudgetArray'\n  /api/v1/currencies/{code}/bills:\n    get:\n      summary: List all bills with this currency.\n      description: List all bills with this currency.\n      operationId: listBillByCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: USD\n        description: The currency code.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of bills.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillArray'\n  /api/v1/currencies/{code}/budget_limits:\n    get:\n      summary: List all budget limits with this currency\n      description: List all budget limits with this currency\n      operationId: listBudgetLimitByCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: USD\n        description: The currency code.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: Start date for the budget limit list.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: \"2018-01-01\"\n      - in: query\n        name: end\n        description: End date for the budget limit list.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: \"2018-01-31\"\n      responses:\n        '200':\n          description: A list of budget limits.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BudgetLimitArray'\n  /api/v1/currencies/{code}/cer:\n    get:\n      summary: List all known exchange rates with (from or to) this currency.\n      description: List all known exchange rates.\n      operationId: listExchangeRateByCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: GBP\n        description: The currency code.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: date\n        description: |\n          The date of which you want to know the exchange rate\n        required: false\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: start\n        description: |\n          Use this instead of the date parameter to search for a range of currency exchange values.\n        required: false\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: end\n        description: |\n          Use this instead of the date parameter to search for a range of currency exchange values.\n        required: false\n        schema:\n          type: string\n          format: date\n      responses:\n        '200':\n          description: A list of exchange rates\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExchangeRateArray'\n  /api/v1/currencies/{code}/recurrences:\n    get:\n      summary: List all recurring transactions with this currency.\n      description: List all recurring transactions with this currency.\n      operationId: listRecurrenceByCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: EUR\n        description: The currency code.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of recurring transactions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecurrenceArray'\n  /api/v1/currencies/{code}/rules:\n    get:\n      summary: List all rules with this currency.\n      description: List all rules with this currency.\n      operationId: listRuleByCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: USD\n        description: The currency code.\n      - in: query\n        name: page\n        description: Page number. The default pagination per 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of rules\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleArray'\n  /api/v1/currencies/{code}/transactions:\n    get:\n      summary: List all transactions with this currency.\n      description: List all transactions with this currency.\n      operationId: listTransactionByCurrency\n      tags:\n        - currencies\n      parameters:\n      - in: path\n        name: code\n        required: true\n        schema:\n          type: string\n          format: string\n          example: USD\n        description: The currency code.\n      - in: query\n        name: page\n        description: Page number. The default pagination is per 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start_date\n        description: |\n          A date formatted YYYY-MM-DD, to limit the list of transactions.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end_date\n        description: |\n          A date formatted YYYY-MM-DD, to limit the list of transactions.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-12-31\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/currencies/default:\n    get:\n      summary: Get the user's default currency.\n      description: Get the user's default currency.\n      operationId: getDefaultCurrency\n      tags:\n        - currencies\n      responses:\n        '200':\n          description: 'The default currency'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrencySingle'\n  \n  /api/v1/data/destroy:\n    delete:\n      tags:\n        - data\n      operationId: destroyData\n      summary: Endpoint to destroy user data\n      description: |\n        A call to this endpoint permanently destroys the requested data type. Use it with care and always with user permission.\n        The demo user is incapable of using this endpoint.\n      responses:\n        '204':\n          description: Empty response when data has been destroyed.\n        '500':\n          description: Internal error, or user is unauthorized to destroy data.\n      parameters:\n      - in: query\n        name: objects\n        description: The type of data that you wish to destroy.\n        required: true\n        schema:\n          $ref: '#/components/schemas/DataDestroyObject'\n  \n  /api/v1/import/list:\n    get:\n      description: List all imports\n      tags:\n        - import\n      operationId: listImport\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is per 50 items.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      summary: List al imports\n      responses:\n        '200':\n          description: A list of import jobs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportJobArray'\n  /api/v1/import/{key}:\n    get:\n      description: Show info on single import.\n      tags:\n      - import\n      summary: Show info on a single import\n      operationId: getImport\n      parameters:\n      - in: path\n        name: key\n        required: true\n        schema:\n          type: string\n          format: string\n          example: x2Akaijm2\n        description: The job key of an import job.\n      responses:\n        '200':\n          description: 'The requested import job'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportJobSingle'\n        '404':\n          description: Import job not found\n  /api/v1/import/{key}/transactions:\n    get:\n      tags:\n        - import\n      summary: List all transactions related to the import job. The correlation is made through the tag.\n      description: |\n        See summary\n      operationId: listTransactionByImport\n      parameters:\n      - in: path\n        name: key\n        required: true\n        schema:\n          type: string\n          format: string\n          example: abcde\n        description: The key of the import job\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).\n        required: false\n        schema:\n          type: string\n          format:  date\n          example: 2018-09-17\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned.\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  \n  # TODO\n  # upload import file.\n  # Download used config file\n  # set config value for provider\n  # list of config values for provider that need filling in\n  # read config value of provider\n  # set config value for job\n  # read config value for job\n  # list of config values for job that need filling in\n  \n  /api/v1/link_types:\n    get:\n      tags:\n        - links\n      summary: List all types of links.\n      description: |\n        List all the link types the system has. These include the default ones as well as any new ones.\n      operationId: listLinkType\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50 items.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of link types.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LinkTypeArray'\n    post:\n      tags:\n        - links\n      summary: Create a new link type\n      operationId: storeLinkType\n      description: Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).\n      responses:\n        '200':\n          description: 'New link type stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LinkTypeSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LinkType'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/LinkType'\n        description: JSON array with the necessary link type information or key=value pairs. See the model for the exact specifications.\n        required: true\n  /api/v1/link_types/{id}:\n    get:\n      tags:\n      - links\n      summary: Get single a link type.\n      description: |\n        Returns a single link type by its ID.\n      operationId: getLinkType\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the link type.\n      responses:\n        '200':\n          description: 'The requested link type'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LinkTypeSingle'\n        '404':\n          description: Link type not found.\n    put:\n      summary: Update existing link type.\n      description: |\n        Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it.\n      operationId: updateLinkType\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the link type.\n      tags:\n        - links\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LinkType'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/LinkType'\n        description: JSON array or formdata with updated link type information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated link type stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LinkTypeSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '500':\n          description: Cannot delete this link type.\n    delete:\n      summary: Permanently delete link type.\n      description: |\n        Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it.\n      operationId: deleteLinkType\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the link type.\n      tags:\n        - links\n      responses:\n        '204':\n          description: Link type deleted\n        '404':\n          description: No such link type\n        '500':\n          description: Cannot delete this link type.\n  /api/v1/link_types/{id}/transactions:\n    get:\n      tags:\n        - links\n      summary: List all transactions under this link type.\n      description: |\n        List all transactions under this link type, both the inward and outward transactions.\n      operationId: listTransactionByLinkType\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the link type.\n      - in: query\n        name: page\n        description: Page number. The default pagination is per 50 items.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to limit the results.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to limit the results.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned.\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/transaction_links:\n    get:\n      tags:\n        - links\n      summary: List all transaction links.\n      description: |\n        List all the transaction links.\n      operationId: listTransactionLink\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is per 50 items.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of transaction links\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionLinkArray'\n    post:\n      tags:\n        - links\n      summary: Create a new link between transactions\n      operationId: storeTransactionLink\n      description: Store a new link between two transactions. For this end point you need the journal_id from a transaction.\n      responses:\n        '200':\n          description: 'New transaction link stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionLinkSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransactionLink'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TransactionLink'\n        description: JSON array with the necessary link type information or key=value pairs. See the model for the exact specifications.\n        required: true\n  /api/v1/transaction_links/{id}:\n    get:\n      tags:\n      - links\n      summary: Get a single link.\n      description: |\n        Returns a single link by its ID.\n      operationId: getTransactionLink\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction link.\n      responses:\n        '200':\n          description: 'The requested link'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionLinkSingle'\n        '404':\n          description: No such transaction link.\n    delete:\n      summary: Permanently delete link between transactions.\n      description: |\n        Will permanently delete link. Transactions remain.\n      operationId: deleteTransactionLink\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction link.\n      tags:\n        - links\n      responses:\n        '204':\n          description: Transaction link deleted\n        '404':\n          description: No such transaction link\n    put:\n      summary: Update an existing link between transactions.\n      description: |\n        Used to update a single existing link.\n      operationId: updateTransactionLink\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction link.\n      tags:\n        - links\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransactionLink'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TransactionLink'\n        description: JSON array or formdata with updated link type information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated link type stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionLinkSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  \n  /api/v1/piggy_banks:\n    get:\n      summary: List all piggy banks.\n      description: List all piggy banks.\n      operationId: listPiggyBank\n      tags:\n        - piggy_banks\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of piggy banks\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PiggyBankArray'\n    post:\n      summary: Store a new piggy bank\n      description: Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storePiggyBank\n      tags:\n        - piggy_banks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PiggyBank'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PiggyBank'\n        description: \"JSON array or key=value pairs with the necessary piggy bank information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New piggy bank stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PiggyBankSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/piggy_banks/{id}:\n    get:\n      summary: Get a single piggy bank.\n      description: Get a single piggy bank.\n      operationId: getPiggyBank\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the piggy bank.\n      tags:\n        - piggy_banks\n      responses:\n        '200':\n          description: 'The requested piggy bank'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PiggyBankSingle'\n        '404':\n          description: Piggy bank not found\n    put:\n      operationId: updatePiggyBank\n      tags:\n        - piggy_banks\n      description: Update existing piggy bank.\n      summary: Update existing piggy bank.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the piggy bank\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PiggyBank'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PiggyBank'\n        description: JSON array with updated piggy bank information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated piggy bank stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PiggyBankSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deletePiggyBank\n      description: Delete a piggy bank.\n      summary: Delete a piggy bank.\n      tags:\n        - piggy_banks\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the piggy bank.\n      responses:\n        '204':\n          description: Piggy bank deleted.\n        '404':\n          description: No such piggy bank\n  /api/v1/piggy_banks/{id}/events:\n    get:\n      summary: List all events linked to a piggy bank.\n      description: List all events linked to a piggy bank (adding and removing money).\n      operationId: listEventByPiggyBank\n      tags:\n        - piggy_banks\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the piggy bank\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of piggy bank related events\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PiggyBankEventArray'\n  /api/v1/piggy_banks/{id}/attachments:\n    get:\n      summary: Lists all attachments.\n      description: Lists all attachments.\n      operationId: listAttachmentByPiggyBank\n      tags:\n        - piggy_banks\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the piggy bank.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentArray'\n        '404':\n          description: No such piggy bank.\n  /api/v1/preferences:\n    get:\n      summary: List all users preferences.\n      description: List all preferences of the user.\n      operationId: listPreference\n      tags:\n        - preferences\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of preferences.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreferenceArray'\n  /api/v1/preferences/{name}:\n    get:\n      summary: Return a single preference.\n      description: Return a single preference.\n      operationId: getPreference\n      parameters:\n      - in: path\n        name: name\n        required: true\n        schema:\n          type: string\n          format: string\n          example: currencyPreference\n        description: The name of the preference.\n      tags:\n        - preferences\n      responses:\n        '200':\n          description: A single preference.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreferenceSingle'\n    put:\n      summary: Update preference\n      description: Update a user's preference.\n      operationId: updatePreference\n      parameters:\n      - in: path\n        name: name\n        required: true\n        schema:\n          type: string\n          format: string\n          example: currencyPreference\n        description: The name of the preference. Will always overwrite. Will be created if it does not exist.\n      tags:\n        - preferences\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Preference'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Preference'\n        description: \"JSON array or key=value pairs with the necessary preference information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'Updated preference.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreferenceSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  \n  /api/v1/recurrences:\n    get:\n      summary: List all recurring transactions.\n      description: List all recurring transactions.\n      operationId: listRecurrence\n      tags:\n        - recurrences\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of recurring transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecurrenceArray'\n    post:\n      summary: Store a new recurring transaction\n      description: Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeRecurrence\n      tags:\n        - recurrences\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Recurrence'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Recurrence'\n        description: \"JSON array or key=value pairs with the necessary recurring transaction information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New recurring transaction stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecurrenceSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/recurrences/{id}:\n    get:\n      summary: Get a single recurring transaction.\n      description: Get a single recurring transaction.\n      operationId: getRecurrence\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the recurring transaction.\n      tags:\n        - recurrences\n      responses:\n        '200':\n          description: 'The requested recurring transaction'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecurrenceSingle'\n        '404':\n          description: Recurring transaction not found\n    put:\n      operationId: updateRecurrence\n      tags:\n        - recurrences\n      description: Update existing recurring transaction.\n      summary: Update existing recurring transaction.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the recurring transaction.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Recurrence'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Recurrence'\n        description: JSON array with updated recurring transaction information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated recurring transaction stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecurrenceSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteRecurrence\n      description: Delete a recurring transaction. Transactions created will not be deleted.\n      summary: Delete a recurring transaction.\n      tags:\n        - recurrences\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the recurring transaction.\n      responses:\n        '204':\n          description: Recurring transaction deleted.\n        '404':\n          description: No such recurring transaction\n  /api/v1/recurrences/{id}/transactions:\n    get:\n      summary: List all transactions created by a recurring transaction.\n      description: List all transactions created by a recurring transaction, optionally limited to the date ranges specified.\n      operationId: listTransactionByRecurrence\n      tags:\n        - recurrences\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the recurring transaction.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD. Both the start and end date must be present.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD. Both the start and end date must be present.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/recurrences/trigger:\n    post:\n      summary: \"Trigger the creation of recurring transactions (like a cron job).\"\n      description: |\n          Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen.\n      operationId: triggerRecurrence\n      tags:\n        - recurrences\n      responses:\n        '204':\n          description: 'Not triggered (not yet due or unable to).'\n        '200':\n          description: \"Triggered. Due to the way it's fired (an asynchronous job), the result cannot be shown to you.\"\n  \n  /api/v1/rule_groups:\n    get:\n      summary: List all rule groups.\n      description: List all rule groups.\n      operationId: listRuleGroup\n      tags:\n        - rule_groups\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of rule groups.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleGroupArray'\n    post:\n      summary: Store a new rule group.\n      description: Creates a new rule group. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeRuleGroup\n      tags:\n        - rule_groups\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RuleGroup'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/RuleGroup'\n        description: \"JSON array or key=value pairs with the necessary rule group information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New rule group stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleGroupSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/rule_groups/{id}:\n    get:\n      summary: Get a single rule group.\n      description: Get a single rule group. This does not include the rules. For that, see below.\n      operationId: getRuleGroup\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule group.\n      tags:\n        - rule_groups\n      responses:\n        '200':\n          description: 'The requested rule group'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleGroupSingle'\n        '404':\n          description: Rule group not found.\n    put:\n      operationId: updateRuleGroup\n      tags:\n        - rule_groups\n      description: Update existing rule group.\n      summary: Update existing rule group.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule group.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RuleGroup'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/RuleGroup'\n        description: JSON array with updated rule group information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated rule group stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleGroupSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteRuleGroup\n      description: Delete a rule group.\n      summary: Delete a rule group.\n      tags:\n        - rule_groups\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule group.\n      responses:\n        '204':\n          description: Rule group deleted.\n        '404':\n          description: No such rule group\n  /api/v1/rule_groups/{id}/test:\n    get:\n      summary: Test which transactions would be hit by the rule group. No changes will be made.\n      description: Test which transactions would be hit by the rule group. No changes will be made. Limit the result if you want to.\n      operationId: testRuleGroup\n      tags:\n        - rule_groups\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule group.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50 items.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: search_limit\n        description: |\n          Maximum number of transactions Firefly III will try. Don't set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.\n        required: false\n        schema:\n          type: integer\n      - in: query\n        name: triggered_limit\n        description: |\n          Maximum number of transactions the rule group can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don't go above the user's page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.\n        required: false\n        schema:\n          type: integer\n      - in: query\n        name: accounts\n        explode: false\n        description: |\n          Limit the testing of the rule group to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.\n        required: false\n        example: \"1,2,3\"\n        schema:\n          type: string\n          format: string\n      responses:\n        '200':\n          description: A list of transactions that would be changed by any of the rules of the rule group. No changes will be made.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/rule_groups/{id}/rules:\n    get:\n      summary: List rules in this rule group.\n      description: List rules in this rule group.\n      operationId: listRuleByGroup\n      tags:\n        - rule_groups\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule group.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of rules.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleArray'\n  /api/v1/rule_groups/{id}/trigger:\n    post:\n      summary: Fire the rule group on your transactions.\n      description: Fire the rule group on your transactions. Changes will be made by the rules in the rule group! Limit the result if you want to.\n      operationId: fireRuleGroup\n      tags:\n        - rule_groups\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule group.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.\n        required: false\n        schema:\n          type: string\n          example: 2018-09-17\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.\n        required: false\n        schema:\n          type: string\n          example: 2018-09-17\n          format: date\n      - in: query\n        name: accounts\n        explode: false\n        description: |\n          Limit the testing of the rule group to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.\n        required: false\n        example: \"1,2,3\"\n        schema:\n          type: string\n          format: string\n      responses:\n        '204':\n          description: \"The rules in the group are executed. Due to the setup of this function (asynchronous job execution) the result cannot be displayed.\"\n  \n  /api/v1/rules:\n    get:\n      summary: List all rules.\n      description: List all rules.\n      operationId: listRule\n      tags:\n        - rules\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of rules\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleArray'\n    post:\n      summary: Store a new rule\n      description: Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeRule\n      tags:\n        - rules\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Rule'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Rule'\n        description: \"JSON array or key=value pairs with the necessary rule information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New rule stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/rules/{id}:\n    get:\n      summary: Get a single rule.\n      description: Get a single rule.\n      operationId: getRule\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the object.X\n      tags:\n        - rules\n      responses:\n        '200':\n          description: 'The requested rule'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleSingle'\n        '404':\n          description: Rule not found\n    put:\n      operationId: updateRule\n      tags:\n        - rules\n      description: Update existing rule.\n      summary: Update existing rule.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the object.X\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Rule'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Rule'\n        description: JSON array with updated rule information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated rule stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteRule\n      description: Delete an rule.\n      summary: Delete an rule.\n      tags:\n        - rules\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule.\n      responses:\n        '204':\n          description: Rule deleted.\n        '404':\n          description: No such rule\n  /api/v1/rules/{id}/test:\n    get:\n      summary: Test which transactions would be hit by the rule. No changes will be made.\n      description: Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.\n      operationId: testRule\n      tags:\n        - rules\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: accounts\n        explode: false\n        description: |\n          Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.\n        required: false\n        example: \"1,2,3\"\n        schema:\n          type: string\n          format: string\n      responses:\n        '200':\n          description: A list of transactions that would be changed by the rule. No changes will be made.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/rules/{id}/trigger:\n    post:\n      summary: Fire the rule on your transactions.\n      description: Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.\n      operationId: fireRule\n      tags:\n        - rules\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the rule.\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.\n        required: false\n        schema:\n          type: string\n          example: 2018-09-17\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.\n        required: false\n        schema:\n          type: string\n          example: 2018-09-17\n          format: date\n      - in: query\n        name: accounts\n        explode: false\n        description: |\n          Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.\n        required: false\n        example: \"1,2,3\"\n        schema:\n          type: string\n          format: string\n      responses:\n        '204':\n          description: \"The rules in the group are executed. Due to the setup of this function (asynchronous job execution) the result cannot be displayed.\"\n  \n  # search\n  # limit to specific objects\n  # mixed result list?\n  /api/v1/search/transactions:\n    get:\n      summary: Search for transactions\n      description: Search for transactions\n      operationId: searchTransactions\n      tags:\n        - search\n      parameters:\n      - in: query\n        name: query\n        description: The query you wish to search for.\n        required: true\n        schema:\n          type: string\n          example: \"groceries\"\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/search/accounts:\n    get:\n      summary: Search for accounts\n      description: Search for accounts\n      operationId: searchAccounts\n      tags:\n        - search\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: query\n        description: The query you wish to search for.\n        required: true\n        schema:\n          type: string\n          example: \"checking\"\n      - in: query\n        name: type\n        description: The type of accounts you wish to limit the search to.\n        required: true\n        schema:\n          $ref: '#/components/schemas/AccountTypeFilter'\n      - in: query\n        name: field\n        description: The account field(s) you want to search in.\n        required: true\n        schema:\n          $ref: '#/components/schemas/AccountSearchFieldFilter'\n      responses:\n        '200':\n          description: A list of accounts.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountArray'\n  \n  /api/v1/summary/basic:\n    get:\n      tags:\n        - summary\n      operationId: getBasicSummary\n      summary: Returns basic sums of the users data.\n      parameters:\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: currency_code\n        description: |\n          A currency code like EUR or USD, to filter the result.\n        required: false\n        schema:\n          type: string\n          format: string\n      description: |\n        Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard.\n      responses:\n        '200':\n          description: An array of sums. It depends on the user what you can expect to get back, so please check out the documentation and try this out on the demo site.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BasicSummary'\n  \n  /api/v1/tag-cloud:\n    get:\n      summary: Returns a basic tag cloud.\n      description: Returns a list of tags, which can be used to draw a basic tag cloud.\n      operationId: getTagCloud\n      tags:\n        - tags\n      parameters:\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD.\n        required: true\n        schema:\n          type: string\n          format: date\n      responses:\n        '200':\n          description: A tag cloud\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagCloud'\n  /api/v1/tags:\n    get:\n      summary: List all tags.\n      description: List all of the user's tags.\n      operationId: listTag\n      tags:\n        - tags\n      parameters:\n        - in: query\n          name: page\n          description: Page number\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: A list of tags\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagArray'\n    post:\n      summary: Store a new tag\n      description: Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeTag\n      tags:\n        - tags\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TagModel'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TagModel'\n        description: \"JSON array or key=value pairs with the necessary tag information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New tag stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/tags/{tag}:\n    get:\n      summary: Get a single tag.\n      description: Get a single tag.\n      operationId: getTag\n      parameters:\n      - in: path\n        name: tag\n        description: Either the tag itself or the tag ID.\n        required: true\n        schema:\n          type: string\n          format: string\n          example: groceries\n      - in: query\n        name: page\n        description: Page number\n        required: false\n        schema:\n          type: integer\n      tags:\n        - tags\n      responses:\n        '200':\n          description: 'The requested tag'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagSingle'\n        '404':\n          description: Tag not found\n    put:\n      operationId: updateTag\n      tags:\n        - tags\n      description: Update existing tag.\n      summary: Update existing tag.\n      parameters:\n      - in: path\n        name: tag\n        description: Either the tag itself or the tag ID.\n        required: true\n        schema:\n          type: string\n          format: string\n          example: groceries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TagModel'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TagModel'\n        description: JSON array with updated tag information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated tag stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteTag\n      description: Delete an tag.\n      summary: Delete an tag.\n      tags:\n        - tags\n      parameters:\n      - in: path\n        name: tag\n        description: Either the tag itself or the tag ID.\n        required: true\n        schema:\n          type: string\n          format: string\n          example: groceries\n      responses:\n        '204':\n          description: Tag deleted.\n        '404':\n          description: \"No such tag\"\n  \n  /api/v1/tags/{tag}/transactions:\n    get:\n      summary: \"List all transactions with this tag.\"\n      description: \"List all transactions with this tag.\"\n      operationId: listTransactionByTag\n      tags:\n        - tags\n      parameters:\n      - in: path\n        name: tag\n        description: Either the tag itself or the tag ID.\n        required: true\n        schema:\n          type: string\n          format: string\n          example: groceries\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned.\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n  /api/v1/tags/{tag}/attachments:\n    get:\n      summary: Lists all attachments.\n      description: Lists all attachments.\n      operationId: listAttachmentByTag\n      tags:\n        - tags\n      parameters:\n      - in: path\n        name: tag\n        description: Either the tag itself or the tag ID.\n        required: true\n        schema:\n          type: string\n          format: string\n          example: groceries\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentArray'\n        '404':\n          description: No such tag.\n  /api/v1/transactions:\n    get:\n      summary: |\n        List all the user's transactions.\n      description: List all the user's transactions.\n      operationId: listTransaction\n      tags:\n        - transactions\n      parameters:\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      - in: query\n        name: start\n        description: |\n          A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: end\n        description: |\n          A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).\n        required: false\n        schema:\n          type: string\n          format: date\n          example: 2018-09-17\n      - in: query\n        name: type\n        description: Optional filter on the transaction type(s) returned.\n        required: false\n        schema:\n          $ref: '#/components/schemas/TransactionTypeFilter'\n      responses:\n        '200':\n          description: A list of transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionArray'\n    post:\n      summary: Store a new transaction\n      description: Creates a new transaction. The data required can be submitted as a JSON body or as a list of parameters.\n      operationId: storeTransaction\n      tags:\n        - transactions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Transaction'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Transaction'\n        description: \"JSON array or key=value pairs with the necessary transaction information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New transaction stored(s), result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/transactions/{id}:\n    get:\n      summary: Get a single transaction.\n      description: Get a single transaction.\n      operationId: getTransaction\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction.\n      tags:\n        - transactions\n      responses:\n        '200':\n          description: 'The requested transaction.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionSingle'\n        '404':\n          description: Transaction not found.\n    put:\n      operationId: updateTransaction\n      tags:\n        - transactions\n      description: Update an existing transaction.\n      summary: Update existing transaction.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Transaction'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Transaction'\n        description: JSON array with updated transaction information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated transaction stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteTransaction\n      description: Delete a transaction.\n      summary: Delete a transaction.\n      tags:\n        - transactions\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction.\n      responses:\n        '204':\n          description: Transaction deleted.\n        '404':\n          description: No such transaction.\n  /api/v1/transactions/{id}/attachments:\n    get:\n      summary: Lists all attachments.\n      description: Lists all attachments.\n      operationId: listAttachmentByTransaction\n      tags:\n        - transactions\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentArray'\n        '404':\n          description: No such transaction.\n  /api/v1/transactions/{id}/piggy_bank_events:\n    get:\n      summary: Lists all piggy bank events.\n      description: Lists all piggy bank events.\n      operationId: listEventByTransaction\n      tags:\n        - transactions\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction.\n      - in: query\n        name: page\n        description: Page number. The default pagination is 50.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of piggy bank events.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PiggyBankEventArray'\n        '404':\n          description: No such transaction.\n  /api/v1/transaction-journals/{id}:\n    get:\n      summary: Get a single transaction, based on one of the underlying transaction journals.\n      description: Get a single transaction by underlying journal.\n      operationId: getTransactionByJournal\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The ID of the transaction journal.\n      tags:\n        - transactions\n      responses:\n        '200':\n          description: 'The requested transaction.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionSingle'\n        '404':\n          description: Transaction not found.\n  /api/v1/users:\n    get:\n      summary: List all users.\n      description: List all the users in this instance of Firefly III.\n      operationId: listUser\n      tags:\n        - users\n      parameters:\n      - in: query\n        name: page\n        description: The page number, if necessary. The default pagination is 50, so 50 users per page.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of users.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserArray'\n    post:\n      summary: Store a new user\n      description: |\n          Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \"forgot password\" function.\n      operationId: storeUser\n      tags:\n        - users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: \"JSON array or key=value pairs with the necessary user information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New user stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/users/{id}:\n    get:\n      summary: Get a single user.\n      description: Gets all info of a single user.\n      operationId: getUser\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The user ID.\n      tags:\n        - users\n      responses:\n        '200':\n          description: 'The requested user.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSingle'\n        '404':\n          description: User not found.\n    put:\n      operationId: updateUser\n      tags:\n        - users\n      description: Update existing user.\n      summary: Update an existing user's information.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The user ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: JSON array with updated user information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated user stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteUser\n      description: Delete a user. You cannot delete the current user.\n      summary: Delete a user.\n      tags:\n        - users\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The user ID.\n      responses:\n        '204':\n          description: User deleted.\n        '404':\n          description: No such user.\n        '500':\n          description: Error when deleting, or when it is the currently authenticated user.\n  /api/v1/webhooks:\n    get:\n      summary: List all webhooks.\n      description: List all the user's webhooks.\n      operationId: listWebhook\n      tags:\n        - webhooks\n      parameters:\n      - in: query\n        name: page\n        description: The page number, if necessary. The default pagination is 50, so 50 webhooks per page.\n        required: false\n        schema:\n          type: integer\n          example: 1\n      responses:\n        '200':\n          description: A list of webhooks.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookArray'\n    post:\n      summary: Store a new webhook\n      description: |\n          Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret.\n      operationId: storeUser\n      tags:\n        - webhooks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n        description: \"JSON array or key=value pairs with the necessary webhook information. See the model for the exact specifications.\"\n        required: true\n      responses:\n        '200':\n          description: 'New webhook stored, result in response.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n  /api/v1/webhooks/{id}:\n    get:\n      summary: Get a single webhook.\n      description: Gets all info of a single webhook.\n      operationId: getWebhook\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The webhook ID.\n      tags:\n        - webhooks\n      responses:\n        '200':\n          description: 'The requested webhook.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookSingle'\n        '404':\n          description: Webhook not found.\n    put:\n      operationId: updateWebhook\n      tags:\n        - webhooks\n      description: Update existing webhook.\n      summary: Update an existing webhook's information.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The webhook ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n        description: JSON array with updated webhook information. See the model for the exact specifications.\n        required: true\n      responses:\n        '200':\n          description: 'Updated webhook stored, result in response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookSingle'\n        '422':\n          description: 'Validation errors (see body)'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n    delete:\n      operationId: deleteWebhook\n      description: Delete a webhook.\n      summary: Delete a webhook.\n      tags:\n        - webhooks\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          example: 1\n        description: The webhook ID.\n      responses:\n        '204':\n          description: Webhook deleted.\n        '404':\n          description: No such webhook.\n        '500':\n          description: Error when deleting.\ncomponents:\n  schemas:\n    Account:\n      type: object\n      required:\n        - name\n        - type\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"My checking account\"\n        type:\n          type: string\n          format: string\n          example: asset\n          description: \"Can only be one one these account types. import, initial-balance and reconciliation cannot be set manually.\"\n          enum:\n            - asset\n            - expense\n            - import\n            - revenue\n            - cash\n            - liability\n            - liabilities\n            - \"initial-balance\"\n            - reconciliation\n        iban:\n          type: string\n          format: iban\n          example: \"GB98MIDL07009312345678\"\n        bic:\n          type: string\n          format: string\n          example: \"BOFAUS3N\"\n        account_number:\n          type: string\n          format: string\n          example: \"7009312345678\"\n        opening_balance:\n          type: string\n          format: amount\n          example: \"-1012.12\"\n        opening_balance_date:\n          type: string\n          format: date\n          example: \"2018-09-17\"\n        virtual_balance:\n          type: string\n          format: amount\n          example: \"123.45\"\n        current_balance:\n          type: string\n          format: amount\n          example: \"123.45\"\n          readOnly: true\n        current_balance_date:\n          type: string\n          format: date\n          example: \"2018-09-17\"\n          readOnly: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 12\n          description: \"Use either currency_id or currency_code. Defaults to the user's default currency.\"\n        currency_code:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: \"Use either currency_id or currency_code. Defaults to the user's default currency.\"\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        active:\n          type: boolean\n          format: boolean\n          example: false\n          description: \"If omitted, defaults to true.\"\n        order:\n          type: integer\n          format: int32\n          example: 1\n          description: \"Order of the account\"\n        include_net_worth:\n          type: boolean\n          format: boolean\n          example: true\n          description: \"If omitted, defaults to true.\"\n        account_role:\n          type: string\n          format: string\n          example: \"defaultAsset\"\n          description: \"Is only mandatory when the type is asset.\"\n          enum:\n          - defaultAsset\n          - sharedAsset\n          - savingAsset\n          - ccAsset\n          - cashWalletAsset\n        credit_card_type:\n          type: string\n          format: string\n          example: monthlyFull\n          description: \"Mandatory when the account_role is ccAsset. Can only be monthlyFull.\"\n          nullable: true\n          enum:\n          - monthlyFull\n        monthly_payment_date:\n          nullable: true\n          type: string\n          format: date\n          example: \"2018-09-17\"\n          description: \"Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.\"\n        liability_type:\n          type: string\n          format: string\n          example: loan\n          description: \"Mandatory when type is liability. Specifies the exact type.\"\n          enum:\n          - loan\n          - debt\n          - mortgage\n        liability_amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n          description: \"Mandatory when type is liability. Amount of money in the liability. Must be positive.\"\n        liability_start_date:\n          type: string\n          format: date\n          example: \"2017-09-17\"\n          description: \"Mandatory when type is liability. Start date for the liability.\"\n        interest:\n          type: string\n          format: string\n          example: \"5.3\"\n          description: \"Mandatory when type is liability. Interest percentage.\"\n        interest_period:\n          type: string\n          format: string\n          example: monthly\n          description: \"Mandatory when type is liability. Period over which the interest is calculated.\"\n          enum:\n            - daily\n            - monthly\n            - yearly\n        notes:\n          type: string\n          format: string\n          example: \"Some example notes\"\n    \n    AccountArray:\n      type: object\n      required:\n        - data\n        - meta\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/AccountRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n    \n    AccountRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"accounts\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Account'\n    \n    AccountSearchFieldFilter:\n      type: string\n      enum:\n        - all\n        - iban\n        - name\n        - number\n        - id\n    \n    AccountSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/AccountRead'\n    \n    AccountTypeFilter:\n      type: string\n      enum:\n        - all\n        - asset\n        - cash\n        - expense\n        - revenue\n        - special\n        - hidden\n        - liability\n        - liabilities\n        - Default account\n        - Cash account\n        - Asset account\n        - Expense account\n        - Revenue account\n        - Initial balance account\n        - Beneficiary account\n        - Import account\n        - Reconciliation account\n        - Loan\n        - Debt\n        - Mortgage\n    AccountTypeProperty:\n      type: string\n      format: string\n      example: \"Asset account\"\n      readOnly: true\n      enum:\n        - Default account\n        - Cash account\n        - Asset account\n        - Expense account\n        - Revenue account\n        - Initial balance account\n        - Beneficiary account\n        - Import account\n        - Reconciliation account\n        - Loan\n        - Debt\n        - Mortgage\n    Attachment:\n      type: object\n      required:\n        - filename\n        - attachable_type\n        - attachable_id\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        filename:\n          type: string\n          format: string\n          example: \"file.pdf\"\n        attachable_type:\n          type: string\n          format: string\n          example: \"Bill\"\n          description: The object class to which the attachment must be linked.\n          enum:\n          - Bill\n          - TransactionJournal\n          - ImportJob\n        attachable_id:\n          type: integer\n          format: int32\n          example: 134\n          description: ID of the model this attachment is linked to.\n        md5:\n          type: string\n          format: string\n          example: \"0c3f95f34370baa88f9fd9a671fea305\"\n          description: MD5 hash of the file for basic duplicate detection.\n        download_uri:\n          type: string\n          format: string\n          example: \"https://demo.firefly-iii.org/api/v1/attachments/191/download\"\n        upload_uri:\n          type: string\n          format: string\n          example: \"https://demo.firefly-iii.org/api/v1/attachments/191/download\"\n        title:\n          type: string\n          format: string\n          example: \"Some PDF file\"\n        notes:\n          type: string\n          format: string\n          example: \"Some notes\"\n        mime:\n          type: string\n          format: string\n          example: \"application/pdf\"\n          readOnly: true\n        size:\n          type: integer\n          format: int32\n          example: 48211\n          readOnly: true\n    \n    AttachmentArray:\n      type: object\n      required:\n        - data\n        - meta\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/AttachmentRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n    \n    AttachmentRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"attachments\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Attachment'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    AttachmentSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/AttachmentRead'\n    \n    AutocompleteAccount:\n      type: object\n      required:\n        - id\n        - name\n        - name_with_balance\n        - type\n        - currency_id\n        - currency_code\n        - currency_symbol\n        - currency_decimal_places\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Checking Account\"\n          description: Name of the account found by an auto-complete search.\n          readOnly: true\n        name_with_balance:\n          type: string\n          format: string\n          example: \"Checking Account ($123.45)\"\n          description: Asset accounts and liabilities have a second field with the given date's account balance.\n          readOnly: true\n        type:\n          type: string\n          format: string\n          example: \"Asset account\"\n          description: Account type of the account found by the auto-complete search.\n          readOnly: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 12\n          description: Currency ID for this account.\n          readOnly: true\n        currency_code:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: Currency code for this account.\n          readOnly: true\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n    \n    AutocompleteAccountArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteAccount'\n    \n    AutocompleteBill:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Yearly bill\"\n          description: Name of the bill found by an auto-complete search.\n          readOnly: true\n    \n    AutocompleteBillArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteBill'\n    \n    AutocompleteBudget:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Groceries\"\n          description: Name of the budget found by an auto-complete search.\n          readOnly: true\n    \n    AutocompleteBudgetArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteBudget'\n    \n    AutocompleteCategory:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Category X\"\n          description: Name of the category found by an auto-complete search.\n          readOnly: true\n    \n    AutocompleteCategoryArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteCategory'\n    \n    AutocompleteCurrency:\n      type: object\n      required:\n        - id\n        - name\n        - code\n        - symbol\n        - decimal_places\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Currency name\"\n          description: Currency name.\n          readOnly: true\n        code:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: Currency code for this account.\n          readOnly: true\n        symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n    \n    AutocompleteCurrencyArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteCurrency'\n    \n    AutocompleteCurrencyCode:\n      type: object\n      required:\n        - id\n        - name\n        - code\n        - symbol\n        - decimal_places\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Currency name (XCN)\"\n          description: Currency name with the code between brackets.\n          readOnly: true\n        code:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: Currency code for this account.\n          readOnly: true\n        symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n    \n    AutocompleteCurrencyCodeArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteCurrencyCode'\n    \n    AutocompleteObjectGroup:\n      type: object\n      required:\n        - id\n        - title\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        title:\n          type: string\n          format: string\n          example: \"Object Group one\"\n          description: Title of the object group found by an auto-complete search.\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Object Group one\"\n          description: Title of the object group found by an auto-complete search.\n          readOnly: true\n    \n    AutocompleteObjectGroupArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteObjectGroup'\n    \n    AutocompletePiggy:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"New couch\"\n          description: Name of the piggy bank found by an auto-complete search.\n          readOnly: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 12\n          description: Currency ID for this piggy bank.\n          readOnly: true\n        currency_code:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: Currency code for this piggy bank.\n          readOnly: true\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n    AutocompletePiggyArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompletePiggy'\n    \n    AutocompletePiggyBalance:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"New couch\"\n          description: Name of the piggy bank found by an auto-complete search.\n          readOnly: true\n        name_with_balance:\n          type: string\n          format: string\n          example: \"New couch\"\n          description: Name of the piggy bank found by an auto-complete search with the current balance formatted nicely.\n          readOnly: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 12\n          description: Currency ID for this piggy bank.\n          readOnly: true\n        currency_code:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: Currency code for this piggy bank.\n          readOnly: true\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n    AutocompletePiggyBalanceArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompletePiggyBalance'\n    \n    AutocompleteRule:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Rule one\"\n          description: Name of the rule found by an auto-complete search.\n          readOnly: true\n    \n    AutocompleteRuleArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteRule'\n    \n    AutocompleteRuleGroup:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Rule group one\"\n          description: Name of the rule group found by an auto-complete search.\n          readOnly: true\n    \n    AutocompleteRuleGroupArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteRuleGroup'\n    \n    AutocompleteTag:\n      type: object\n      required:\n        - id\n        - name\n        - tag\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"too-expensive-tag-example\"\n          description: Name of the tag found by an auto-complete search.\n          readOnly: true\n        tag:\n          type: string\n          format: string\n          example: \"too-expensive-tag-example\"\n          description: Name of the tag found by an auto-complete search.\n          readOnly: true\n    \n    AutocompleteTagArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteTag'\n    \n    AutocompleteTransaction:\n      type: object\n      required:\n        - id\n        - name\n        - description\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Transaction\"\n          description: Transaction description with ID\n          readOnly: true\n        description:\n          type: string\n          format: string\n          example: \"Transaction\"\n          description: Transaction description with ID\n          readOnly: true\n    \n    AutocompleteTransactionArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteTransaction'\n    \n    AutocompleteTransactionID:\n      type: object\n      required:\n        - id\n        - name\n        - description\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"#12: Transaction\"\n          description: Transaction description with ID\n          readOnly: true\n        description:\n          type: string\n          format: string\n          example: \"#12: Transaction\"\n          description: Transaction description with ID\n          readOnly: true\n    AutocompleteTransactionIDArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteTransactionID'\n    \n    AutocompleteTransactionType:\n      type: object\n      required:\n        - id\n        - name\n        - type\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Withdrawal\"\n          description: Type of the object found by an auto-complete search.\n          readOnly: true\n        type:\n          type: string\n          format: string\n          example: \"Withdrawal\"\n          description: Name of the object found by an auto-complete search.\n          readOnly: true\n    \n    AutocompleteTransactionTypeArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/AutocompleteTransactionType'\n    \n    AvailableBudget:\n      type: object\n      required:\n        - amount\n        - start\n        - end\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n          description: Use either currency_id or currency_code.\n        currency_code:\n          type: string\n          format: string\n          example: EUR\n          description: Use either currency_id or currency_code.\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n        start:\n          type: string\n          format: date\n          example: \"2017-09-17\"\n          description: Start date of the available budget.\n        end:\n          type: string\n          format: date\n          example: \"2017-09-17\"\n          description: End date of the available budget.\n        spent_in_budgets:\n          type: array\n          items:\n            $ref: '#/components/schemas/BudgetSpent'\n          readOnly: true\n        spent_outside_budget:\n          type: array\n          items:\n            $ref: '#/components/schemas/BudgetSpent'\n          readOnly: true\n    \n    AvailableBudgetArray:\n      type: object\n      required:\n        - data\n        - meta\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/AvailableBudgetRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n    \n    AvailableBudgetRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"available_budgets\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/AvailableBudget'\n    \n    AvailableBudgetSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/AvailableBudgetRead'\n    \n    BasicSummary:\n      type: array\n      items:\n        $ref: '#/components/schemas/BasicSummaryEntry'\n    \n    BasicSummaryEntry:\n      type: object\n      properties:\n        key:\n          type: string\n          format: string\n          example: \"balance-in-EUR\"\n          description: \"This is a reference to the type of info shared, not influenced by translations or user preferences.\"\n        title:\n          type: string\n          format: string\n          example: \"Balance ($)\"\n          description: \"A translated title for the information shared.\"\n        monetary_value:\n          type: number\n          format: double\n          example: 123.45\n          description: \"The amount as a float.\"\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n          description: \"The currency ID of the associated currency.\"\n        currency_code:\n          type: string\n          format: string\n          example: \"EUR\"\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: \"Number of decimals for the associated currency.\"\n        value_parsed:\n          type: string\n          format: string\n          example: \"$ 12.45\"\n          description: \"The amount formatted according to the users locale\"\n        local_icon:\n          type: string\n          format: string\n          example: \"balance-scale\"\n          description: \"Reference to a font-awesome icon without the fa- part.\"\n        sub_title:\n          type: string\n          format: string\n          example: \"$20 + $-40\"\n          description: \"A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant.\"\n    \n    Bill:\n      type: object\n      required:\n        - name\n        - amount_min\n        - amount_max\n        - date\n        - repeat_freq\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n          description: Use either currency_id or currency_code\n        currency_code:\n          type: string\n          format: string\n          example: EUR\n          description: Use either currency_id or currency_code\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Rent\"\n        amount_min:\n          type: string\n          format: amount\n          example: \"123.45\"\n        amount_max:\n          type: string\n          format: amount\n          example: \"123.45\"\n        date:\n          type: string\n          format: date\n          example: \"2018-09-17\"\n        repeat_freq:\n          type: string\n          format: string\n          example: \"monthly\"\n          description: How often the bill must be paid.\n          enum:\n          - weekly\n          - monthly\n          - quarterly\n          - \"half-year\"\n          - yearly\n        skip:\n          type: integer\n          format: int32\n          example: 0\n          description: How often the bill must be skipped. 1 means a bi-monthly bill.\n        active:\n          type: boolean\n          format: boolean\n          example: true\n          description: If the bill is active.\n        notes:\n          type: string\n          format: string\n          example: \"Some example notes\"\n        next_expected_match:\n          type: string\n          format: date\n          example: \"2018-09-17\"\n          description: \"When the bill is expected to be due.\"\n          readOnly: true\n        object_group_id:\n          type: integer\n          format: int32\n          example: 5\n          description: The group ID of the group this object is part of. NULL if no group.\n        object_group_order:\n          type: integer\n          format: int32\n          example: 5\n          description: The order of the group. At least 1, for the highest sorting.\n        object_group_title:\n          type: string\n          format: string\n          example: \"Example Group\"\n          description: The name of the group. NULL if no group.\n        pay_dates:\n          type: array\n          description: \"Array of future dates when the bill is expected to be paid. Autogenerated.\"\n          readOnly: true\n          items:\n            type: string\n            format: date\n            readOnly: true\n        paid_dates:\n          type: array\n          description: \"Array of past transactions when the bill was paid.\"\n          readOnly: true\n          items:\n            type: object\n            readOnly: true\n            properties:\n              transaction_group_id:\n                type: integer\n                format: int32\n                description: \"Transaction group ID of the paid bill.\"\n                readOnly: true\n              transaction_journal_id:\n                type: integer\n                format: int32\n                description: \"Transaction journal ID of the paid bill.\"\n                readOnly: true\n              date:\n                type: string\n                format: date\n                description: \"Date the bill was paid.\"\n                readOnly: true\n    \n    BillArray:\n      type: object\n      required:\n        - data\n        - meta\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/BillRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n    \n    BillRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"bills\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Bill'\n    \n    BillSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/BillRead'\n    \n    Budget:\n      type: object\n      required:\n        - name\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Bills\"\n        active:\n          type: boolean\n          format: boolean\n          example: false\n        order:\n          type: integer\n          format: int32\n          example: 5\n          readOnly: true\n        auto_budget_type:\n          type: string\n          format: string\n          example: reset\n          description: \"The type of auto-budget that Firefly III must create.\"\n          enum:\n            - reset\n            - rollover\n            - none\n        auto_budget_currency_id:\n          type: integer\n          format: int32\n          example: 12\n          description: \"Use either currency_id or currency_code. Defaults to the user's default currency.\"\n        auto_budget_currency_code:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: \"Use either currency_id or currency_code. Defaults to the user's default currency.\"\n        auto_budget_amount:\n          type: string\n          format: amount\n          example: \"-1012.12\"\n        auto_budget_period:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: \"Period for the auto budget\"\n          enum:\n            - daily\n            - weekly\n            - monthly\n            - quarterly\n            - half_year\n            - yearly\n        spent:\n          description: \"Information on how much was spent in this budget. Is only filled in when the start and end date are submitted.\"\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/BudgetSpent'\n    \n    BudgetArray:\n      type: object\n      required:\n        - data\n        - meta\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/BudgetRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n    \n    BudgetLimit:\n      type: object\n      required:\n        - amount\n        - start\n        - end\n        - budget_id\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n          description: Use either currency_id or currency_code. Defaults to the user's default currency.\n        currency_code:\n          type: string\n          format: string\n          example: EUR\n          description: Use either currency_id or currency_code. Defaults to the user's default currency.\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        budget_id:\n          type: integer\n          format: int32\n          example: 23\n          description: The budget ID of the associated budget.\n        start:\n          type: string\n          format: date\n          example: \"2017-09-17\"\n          description: Start date of the budget limit.\n        end:\n          type: string\n          format: date\n          example: \"2017-09-17\"\n          description: End date of the budget limit.\n        amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n        spent:\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/BudgetSpent'\n    \n    BudgetLimitArray:\n      type: object\n      required:\n        - data\n        - meta\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/BudgetLimitRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n    \n    BudgetLimitRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"budget_limits\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/BudgetLimit'\n    \n    BudgetLimitSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/BudgetLimitRead'\n    \n    BudgetRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"budgets\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Budget'\n    \n    BudgetSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/BudgetRead'\n    \n    BudgetSpent:\n      type: object\n      properties:\n        sum:\n          type: string\n          format: amount\n          example: \"123.45\"\n          description: The amount spent.\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n        currency_code:\n          type: string\n          format: string\n          example: \"USD\"\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Number of decimals supported by the currency\n    \n    Category:\n      type: object\n      required:\n        - name\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"Lunch\"\n        notes:\n          type: string\n          format: string\n          example: \"Some example notes\"\n        spent:\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/CategorySpent'\n        earned:\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/CategoryEarned'\n    \n    CategoryArray:\n      type: object\n      required:\n        - data\n        - meta\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/CategoryRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n    \n    CategoryEarned:\n      type: object\n      properties:\n        start:\n          type: string\n          format: date\n          example: \"2018-04-01\"\n        end:\n          type: string\n          format: date\n          example: \"2018-04-30\"\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n        currency_code:\n          type: string\n          format: string\n          example: \"USD\"\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Number of decimals supported by the currency\n        amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n          description: The amount earned.\n    \n    CategoryRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"categories\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Category'\n    \n    CategorySingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/CategoryRead'\n    \n    CategorySpent:\n      type: object\n      properties:\n        start:\n          type: string\n          format: date\n          example: \"2018-04-01\"\n        end:\n          type: string\n          format: date\n          example: \"2018-04-30\"\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n        currency_code:\n          type: string\n          format: string\n          example: \"USD\"\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Number of decimals supported by the currency\n        amount:\n          type: string\n          format: amount\n          example: \"-12423.45\"\n          description: The amount spent.\n    \n    ChartBar:\n      type: array\n      items:\n        $ref: '#/components/schemas/ChartDataSet'\n    \n    ChartDataPoint:\n      type: object\n      properties:\n        key:\n          type: string\n          format: string\n          example: \"value\"\n          description: \"The key is the label of the value, so for example: '2018-01-01' => 13 or 'Groceries' => -123.\"\n    \n    ChartDataSet:\n      type: object\n      properties:\n        label:\n          type: string\n          format: string\n          example: \"Checking account\"\n          description: \"This is the title of the current set. It can refer to an account, a budget or another object (by name).\"\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n          description: \"The currency ID of the currency associated to the data in the entries.\"\n        currency_code:\n          type: string\n          format: string\n          example: \"EUR\"\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: \"Number of decimals for the currency associated to the data in the entries.\"\n        type:\n          type: string\n          format: string\n          example: \"line\"\n          description: \"Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want.\"\n        yAxisID:\n          type: integer\n          format: int32\n          example: 0\n          description: \"Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart).\"\n        entries:\n          type: array\n          description: \"The actual entries for this data set. They 'key' value is the label for the data point. The value is the actual (numerical) value.\"\n          items:\n            $ref: '#/components/schemas/ChartDataPoint'\n    ChartLine:\n      type: array\n      items:\n        $ref: '#/components/schemas/ChartDataSet'\n    \n    Configuration:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            is_demo_site:\n              type: boolean\n              format: boolean\n              example: true\n            permission_update_check:\n              type: integer\n              format: int32\n              example: -1\n              nullable: true\n              description: |\n                If the user has given permission to check for updates.\n                - null = never asked.\n                - -1 = never asked.\n                - 0 = no permission.\n                - 1 = permission\n            last_update_check:\n              type: string\n              format: date-time\n              example: \"2018-09-17T12:46:47+01:00\"\n            single_user_mode:\n              type: boolean\n              format: boolean\n              example: true\n              description: Whether other users can register.\n    ConfigurationUpdate:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: string\n          format: string\n          example: \"1\"\n          description: Can be a number or a boolean. This depends on the actual configuration value.\n    Currency:\n      type: object\n      required:\n        - code\n        - name\n        - symbol\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        enabled:\n          type: boolean\n          format: boolean\n          example: true\n          description: defaults to true\n        default:\n          type: boolean\n          format: boolean\n          example: false\n          description: Make this currency the default currency.\n        code:\n          type: string\n          format: string\n          example: AMS\n        name:\n          type: string\n          format: string\n          example: Ankh-Morpork dollar\n        symbol:\n          type: string\n          format: string\n          example: \"AM$\"\n        decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Supports 0-16 decimals.\n    \n    CurrencyArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/CurrencyRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    CurrencyRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"currencies\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Currency'\n    \n    CurrencySingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/CurrencyRead'\n    \n    DataDestroyObject:\n      type: string\n      enum:\n        - budgets\n        - bills\n        - piggy_banks\n        - rules\n        - recurring\n        - categories\n        - tags\n        - object_groups\n        - accounts\n        - asset_accounts\n        - expense_accounts\n        - revenue_accounts\n        - liabilities\n        - transactions\n        - withdrawals\n        - deposits\n        - transfers\n    \n    ExchangeRate:\n      type: object\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"currency_exchange_rates\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          type: object\n          properties:\n            created_at:\n              type: string\n              format: date-time\n              example: \"2018-09-17T12:46:47+01:00\"\n            updated_at:\n              type: string\n              format: date-time\n              example: \"2018-09-17T12:46:47+01:00\"\n            from_currency_id:\n              type: integer\n              format: int32\n              example: 5\n            from_currency_name:\n              type: string\n              format: string\n              example: \"Euro\"\n            from_currency_code:\n              type: string\n              format: string\n              example: EUR\n            from_currency_symbol:\n              type: string\n              format: string\n              example: \"$\"\n            from_currency_decimal_places:\n              type: integer\n              format: int32\n              example: 2\n            to_currency_id:\n              type: integer\n              format: int32\n              example: 5\n            to_currency_code:\n              type: string\n              format: string\n              example: EUR\n            to_currency_symbol:\n              type: string\n              format: string\n              example: \"$\"\n            to_currency_decimal_places:\n              type: integer\n              format: int32\n              example: 2\n            date:\n              type: string\n              format: date\n              example: \"2018-09-17\"\n            rate:\n              type: number\n              format: float\n              example: 1.1213\n            amount:\n              type: string\n              format: amount\n              example: \"123.45\"\n              description: The amount in the \"to\"-currency, if provided in the request.\n    \n    ExchangeRateArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExchangeRate'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    ImportJob:\n      type: object\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"import_jobs\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          type: object\n          properties:\n            created_at:\n              type: string\n              format: date-time\n              example: \"2018-09-17T12:46:47+01:00\"\n            updated_at:\n              type: string\n              format: date-time\n              example: \"2018-09-17T12:46:47+01:00\"\n            tag_id:\n              type: integer\n              format: int32\n              example: 121\n              description: ID of the tag related to the import job, if present.\n            tag_tag:\n              type: string\n              format: string\n              example: \"Import with key 'abcdef'\"\n              description: Tag related to the import job, if present.\n            key:\n              type: string\n              format: string\n              example: abcdef\n              description: Import job unique identifier.\n            file_type:\n              type: string\n              format: string\n              example: csv\n              description: File type, if relevant.\n            provider:\n              type: string\n              format: string\n              example: bunq\n              description: Import provider that did the import.\n            status:\n              type: string\n              format: string\n              example: import_finished\n              description: Status of import job.\n            stage:\n              type: string\n              format: string\n              example: apply_rules\n              description: Current stage.\n            configuration:\n              type: string\n              format: string\n              description: JSON string with job-specific configuration.\n            extended_status:\n              type: string\n              format: string\n              description: JSON string with job-specific status.\n            transactions:\n              type: string\n              format: string\n              description: JSON string with a count of transactions in the job.\n            errors:\n              type: string\n              format: string\n              description: JSON string with a list of errors.\n    ImportJobArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImportJob'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    ImportJobSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/ImportJob'\n    \n    LinkType:\n      type: object\n      required:\n        - name\n        - inward\n        - outward\n      properties:\n        name:\n          type: string\n          format: string\n          example: \"Paid\"\n        inward:\n          type: string\n          format: string\n          example: \"is (partially) paid for by\"\n        outward:\n          type: string\n          format: string\n          example: \"(partially) pays for\"\n        editable:\n          type: boolean\n          format: boolean\n          example: false\n          readOnly: true\n    \n    LinkTypeArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/LinkTypeRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    LinkTypeRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"link_types\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/LinkType'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    LinkTypeSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/LinkTypeRead'\n    \n    Meta:\n      type: object\n      properties:\n        pagination:\n          type: object\n          properties:\n            total:\n              type: integer\n              example: 3\n            count:\n              type: integer\n              example: 20\n            per_page:\n              type: integer\n              example: 100\n            current_page:\n              type: integer\n              example: 1\n            total_pages:\n              type: integer\n              example: 1\n    ObjectLink:\n      type: object\n      properties:\n        0:\n          type: object\n          properties:\n            rel:\n              type: string\n              format: string\n              example: \"self\"\n            uri:\n              type: string\n              format: string\n              example: \"/OBJECTS/1\"\n        self:\n          type: string\n          format: uri\n          example: \"https://demo.firefly-iii.org/api/v1/OBJECTS/1\"\n    \n    PageLink:\n      type: object\n      properties:\n        self:\n          type: string\n          format: uri\n          example: \"https://demo.firefly-iii.org/api/v1/OBJECT?&page=4\"\n        first:\n          type: string\n          format: uri\n          example: \"https://demo.firefly-iii.org/api/v1/OBJECT?&page=1\"\n        last:\n          type: string\n          format: uri\n          example: \"https://demo.firefly-iii.org/api/v1/OBJECT?&page=12\"\n    \n    PiggyBank:\n      type: object\n      required:\n        - name\n        - account_id\n        - target_amount\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: \"New digital camera\"\n        account_id:\n          type: integer\n          format: int32\n          example: 13\n          description: The ID of the asset account this piggy bank is connected to.\n        account_name:\n          type: string\n          format: string\n          example: \"Savings account\"\n          description: The name of the asset account this piggy bank is connected to.\n          readOnly: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n          readOnly: true\n        currency_code:\n          type: string\n          format: string\n          example: \"USD\"\n          readOnly: true\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Number of decimals supported by the currency\n          readOnly: true\n        target_amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n        percentage:\n          type: number\n          format: float\n          example: 12.5\n          readOnly: true\n        current_amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n        left_to_save:\n          type: number\n          format: double\n          example: 700\n          readOnly: true\n        save_per_month:\n          type: number\n          format: double\n          example: 12.45\n          readOnly: true\n        start_date:\n          type: string\n          format: date\n          example: \"2018-09-17\"\n          description: The date you started with this piggy bank.\n        target_date:\n          type: string\n          format: date\n          example: \"2020-09-17\"\n          description: The date you intend to finish saving money.\n        order:\n          type: integer\n          format: int32\n          example: 5\n        active:\n          type: boolean\n          format: boolean\n          example: true\n          readOnly: true\n        notes:\n          type: string\n          format: string\n          example: \"Some notes\"\n        object_group_id:\n          type: integer\n          format: int32\n          example: 5\n          description: The group ID of the group this object is part of. NULL if no group.\n        object_group_order:\n          type: integer\n          format: int32\n          example: 5\n          description: The order of the group. At least 1, for the highest sorting.\n        object_group_title:\n          type: string\n          format: string\n          example: \"Example Group\"\n          description: The name of the group. NULL if no group.\n    \n    PiggyBankArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/PiggyBankRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    PiggyBankEvent:\n      type: object\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n        currency_id:\n          type: integer\n          format: int32\n          example: 5\n        currency_code:\n          type: string\n          format: string\n          example: EUR\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n        amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n        journal_id:\n          type: integer\n          format: int32\n          example: 4291\n          description: The journal associated with the event.\n        transaction_id:\n          type: integer\n          format: int32\n          example: 4291\n    \n    PiggyBankEventArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/PiggyBankEventRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    PiggyBankEventRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"piggy_bank_eventss\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/PiggyBankEvent'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    PiggyBankRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"piggy_banks\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/PiggyBank'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    PiggyBankSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/PiggyBankRead'\n    \n    Preference:\n      type: object\n      required:\n        - data\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        name:\n          type: string\n          format: string\n          example: currencyPreference\n          readOnly: true\n        data:\n          type: string\n          format: string\n          example: EUR\n          description: \"This field can also be an array\"\n    \n    PreferenceArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/PreferenceRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    PreferenceRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"preferences\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Preference'\n    \n    PreferenceSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/PreferenceRead'\n    \n    Recurrence:\n      type: object\n      required:\n        - type\n        - title\n        - first_date\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        type:\n          type: string\n          format: string\n          example: \"withdrawal\"\n          enum:\n          - withdrawal\n          - transfer\n          - deposit\n          - \"opening-balance\"\n          - reconciliation\n        title:\n          type: string\n          format: string\n          example: \"Rent\"\n        description:\n          type: string\n          format: string\n          example: \"Recurring transaction for the monthly rent\"\n          description: Not to be confused with the description of the actual transaction(s) being created.\n        first_date:\n          type: string\n          format: date\n          example: \"2017-09-17\"\n          description: \"First time the recurring transaction will fire. Must be after today.\"\n        latest_date:\n          type: string\n          format: date\n          example: \"2018-09-17\"\n          description: \"First time the recurring transaction will fire. Must be after today.\"\n        repeat_until:\n          type: string\n          format: date\n          example: \"2018-09-17\"\n          description: \"Date until the recurring transaction can fire. Use either this field or repetitions.\"\n        nr_of_repetitions:\n          type: integer\n          format: int32\n          example: 5\n          description: Max number of created transactions. Use either this field or repeat_until.\n        apply_rules:\n          type: boolean\n          format: boolean\n          example: true\n          description: \"Whether or not to fire the rules after the creation of a transaction.\"\n        active:\n          type: boolean\n          format: boolean\n          example: true\n          description: If the recurrence is even active.\n        notes:\n          type: string\n          format: string\n          example: \"Some notes\"\n        repetitions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RecurrenceRepetition'\n        transactions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RecurrenceTransaction'\n    \n    RecurrenceArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/RecurrenceRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    RecurrenceRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"recurrences\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Recurrence'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    RecurrenceRepetition:\n      type: object\n      required:\n        - type\n        - moment\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        type:\n          type: string\n          format: string\n          example: \"weekly\"\n          description: \"The type of the repetition. ndom means: the n-th weekday of the month, where you can also specify which day of the week.\"\n          enum:\n          - daily\n          - weekly\n          - ndom\n          - monthly\n          - yearly\n        moment:\n          type: string\n          format: string\n          example: \"3\"\n          description: |\n            Information that defined the type of repetition.\n            - For 'daily', this is empty.\n            - For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).\n            - For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd Wednesday of the month\n            - For 'monthly' it is the day of the month (1 - 31)\n            - For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.\n        skip:\n          type: integer\n          format: int32\n          example: 0\n          description: How many occurrences to skip. 0 means skip nothing. 1 means every other.\n        weekend:\n          type: integer\n          format: int32\n          example: 1\n          description: |\n            How to respond when the recurring transaction falls in the weekend. Possible values:\n            1. Do nothing, just create it\n            2. Create no transaction.\n            3. Skip to the previous Friday.\n            4. Skip to the next Monday.\n        description:\n          type: string\n          format: string\n          example: \"Every week on Friday\"\n          description: Auto-generated repetition description.\n          readOnly: true\n        occurrences:\n          type: array\n          description: \"Array of future dates when the repetition will apply to. Auto generated.\"\n          readOnly: true\n          items:\n            type: string\n            format: date\n    \n    RecurrenceSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/RecurrenceRead'\n    \n    RecurrenceTransaction:\n      type: object\n      required:\n        - description\n        - amount\n      properties:\n        description:\n          type: string\n          format: string\n          example: \"Rent for the current month\"\n        amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n          description: Amount of the transaction.\n        foreign_amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n          description: Foreign amount of the transaction.\n          nullable: true\n        currency_id:\n          type: integer\n          format: int32\n          example: 3\n          description: Submit either a currency_id or a currency_code.\n        currency_code:\n          type: string\n          format: string\n          example: \"EUR\"\n          description: Submit either a currency_id or a currency_code.\n        currency_symbol:\n          type: string\n          format: string\n          example: \"€\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Number of decimals in the currency\n          readOnly: true\n        foreign_currency_id:\n          type: integer\n          format: int32\n          example: 17\n          nullable: true\n          description: Submit either a foreign_currency_id or a foreign_currency_code, or neither.\n        foreign_currency_code:\n          type: string\n          format: string\n          example: \"GBP\"\n          nullable: true\n          description: Submit either a foreign_currency_id or a foreign_currency_code, or neither.\n        foreign_currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          nullable: true\n          readOnly: true\n        foreign_currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Number of decimals in the currency\n          nullable: true\n          readOnly: true\n        budget_id:\n          type: integer\n          format: int32\n          example: 4\n          description: The budget ID for this transaction.\n        budget_name:\n          type: string\n          format: string\n          example: Groceries\n          description: The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.\n          nullable: true\n          readOnly: true\n        category_id:\n          type: integer\n          format: int32\n          description: Category ID for this transaction.\n          example: 211\n        category_name:\n          type: string\n          format: string\n          description: Category name for this transaction.\n          example: \"Bills\"\n        source_id:\n          type: integer\n          format: int32\n          example: 913\n          description: ID of the source account. Submit either this or source_name.\n        source_name:\n          type: string\n          format: string\n          example: \"Checking account\"\n          description: Name of the source account. Submit either this or source_id.\n        source_iban:\n          type: string\n          format: string\n          example: \"NL02ABNA0123456789\"\n          nullable: true\n          readOnly: true\n        source_type:\n          $ref: '#/components/schemas/AccountTypeProperty'\n        destination_id:\n          type: integer\n          format: int32\n          example: 258\n          description: ID of the destination account. Submit either this or destination_name.\n        destination_name:\n          type: string\n          format: string\n          example: \"Buy and Large\"\n          description: Name of the destination account. Submit either this or destination_id.\n        destination_iban:\n          type: string\n          format: string\n          example: \"NL02ABNA0123456789\"\n          nullable: true\n          readOnly: true\n        destination_type:\n          $ref: '#/components/schemas/AccountTypeProperty'\n        tags:\n          type: array\n          nullable: true\n          example:\n          description: Array of tags.\n          items:\n            type: string\n            format: string\n            description: Tag.\n            example: Barbecue preparation\n        piggy_bank_id:\n          type: integer\n          format: int32\n          description: Optional. Use either this or the piggy_bank_name\n        piggy_bank_name:\n          type: string\n          format: string\n          description: Optional. Use either this or the piggy_bank_id\n    \n    Rule:\n      type: object\n      required:\n        - title\n        - rule_group_id\n        - trigger\n        - triggers\n        - actions\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        title:\n          type: string\n          format: string\n          example: \"First rule title.\"\n        description:\n          type: string\n          format: string\n          example: \"First rule description\"\n        rule_group_id:\n          type: integer\n          format: int32\n          example: 81\n          description: \"ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.\"\n        rule_group_title:\n          type: string\n          format: string\n          example: \"New rule group\"\n          description: \"Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory.\"\n        order:\n          type: integer\n          format: int32\n          example: 5\n          readOnly: true\n        trigger:\n          type: string\n          format: string\n          example: store-journal\n          description: Which action is necessary for the rule to fire? Use either store-journal or update-journal.\n          enum:\n          - \"store-journal\"\n          - \"update-journal\"\n        active:\n          type: boolean\n          format: boolean\n          example: true\n          description: Whether or not the rule is even active. Default is true.\n        strict:\n          type: boolean\n          format: boolean\n          example: true\n          description: If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.\n        stop_processing:\n          type: boolean\n          format: boolean\n          example: false\n          description: If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.\n        triggers:\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleTrigger'\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleAction'\n    \n    RuleAction:\n      type: object\n      required:\n        - type\n        - value\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        type:\n          type: string\n          format: string\n          example: \"set_category\"\n          description: The type of thing this action will do. A limited set is possible.\n          enum:\n          - user_action\n          - set_category\n          - clear_category\n          - set_budget\n          - clear_budget\n          - add_tag\n          - remove_tag\n          - remove_all_tags\n          - set_description\n          - append_description\n          - prepend_description\n          - set_source_account\n          - set_destination_account\n          - set_notes\n          - append_notes\n          - prepend_notes\n          - clear_notes\n          - link_to_bill\n          - convert_withdrawal\n          - convert_deposit\n          - convert_transfer\n        value:\n          type: string\n          format: string\n          example: \"Daily groceries\"\n          nullable: true\n          description: \"The accompanying value the action will set, change or update. Can be empty, but for some types this value is mandatory.\"\n        order:\n          type: integer\n          format: int32\n          example: 5\n          description: \"Order of the action\"\n        active:\n          type: boolean\n          format: boolean\n          example: true\n          description: If the action is active.\n        stop_processing:\n          type: boolean\n          format: boolean\n          example: false\n          description: When true, other actions will not be fired after this action has fired.\n    \n    RuleArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    RuleGroup:\n      type: object\n      required:\n        - title\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        title:\n          type: string\n          format: string\n          example: \"Default rule group\"\n        description:\n          type: string\n          format: string\n          example: \"Description of this rule group\"\n        order:\n          type: integer\n          format: int32\n          example: 4\n          readOnly: true\n        active:\n          type: boolean\n          format: boolean\n          example: true\n    \n    RuleGroupArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleGroupRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    RuleGroupRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"rules_group\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/RuleGroup'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    RuleGroupSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/RuleGroupRead'\n    \n    RuleRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"rules\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Rule'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    RuleSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/RuleRead'\n    \n    RuleTrigger:\n      type: object\n      required:\n        - type\n        - value\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 2\n          readOnly: true\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        type:\n          type: string\n          format: string\n          example: \"user_action\"\n          description: The type of thing this trigger responds to. A limited set is possible\n          enum:\n          - from_account_starts\n          - from_account_ends\n          - from_account_is\n          - from_account_contains\n          - to_account_starts\n          - to_account_ends\n          - to_account_is\n          - to_account_contains\n          - amount_less\n          - amount_exactly\n          - amount_more\n          - description_starts\n          - description_ends\n          - description_contains\n          - description_is\n          - transaction_type\n          - category_is\n          - budget_is\n          - tag_is\n          - currency_is\n          - has_attachments\n          - has_no_category\n          - has_any_category\n          - has_no_budget\n          - has_any_budget\n          - has_no_tag\n          - has_any_tag\n          - notes_contain\n          - notes_start\n          - notes_end\n          - notes_are\n          - no_notes\n          - any_notes\n        value:\n          type: string\n          format: string\n          example: \"tag1\"\n          description: \"The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.\"\n        order:\n          type: integer\n          format: int32\n          example: 5\n          description: \"Order of the trigger\"\n          readOnly: true\n        active:\n          type: boolean\n          format: boolean\n          example: true\n          description: If the trigger is active.\n        stop_processing:\n          type: boolean\n          format: boolean\n          example: false\n          description: When true, other triggers will not be checked if this trigger was triggered.\n    \n    SystemInfo:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          required:\n            - version\n            - api_version\n            - php_version\n            - os\n            - driver\n          properties:\n            version:\n              type: string\n              format: semver\n              example: 4.8.0\n            api_version:\n              type: string\n              format: semver\n              example: '0.10.0'\n            php_version:\n              type: string\n              format: semver\n              example: \"7.2\"\n            os:\n              type: string\n              format: string\n              example: Linux vagrant-ubuntu-trusty-64\n            driver:\n              type: string\n              format: string\n              example: mysql\n          type: object\n    \n    TagArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    TagCloud:\n      type: object\n      properties:\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagCloudTag'\n    \n    TagCloudTag:\n      title: A single tag cloud entry\n      type: object\n      properties:\n        tag:\n          type: string\n          format: string\n          example: \"expensive\"\n          description: The tag\n        id:\n          type: integer\n          format: int32\n          example: 2\n          description: \"ID of the tag\"\n        size:\n          type: number\n          format: double\n          example: 24.56\n          description: \"The total amount of money related to this tag. There is no currency information available, and this is a basic sum of all amounts added together.\"\n        relative:\n          type: number\n          format: double\n          example: 0.345\n          description: \"A number between 0 and 1. 1 is given to the largest tag in the tag cloud, and 0 to the smallest. The rest are given a number between 0 and 1, related to their size in comparison to the largest tag.\"\n    \n    TagModel:\n      title: A single tag\n      type: object\n      required:\n        - tag\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        tag:\n          type: string\n          format: string\n          example: \"expensive\"\n          description: The tag\n        date:\n          type: string\n          format: date\n          example: \"2018-09-17\"\n          description: The date to which the tag is applicable.\n          nullable: true\n        description:\n          type: string\n          format: string\n          example: \"Tag for expensive stuff\"\n        latitude:\n          type: number\n          format: double\n          example: 51.983333\n          nullable: true\n          description: Latitude of the tag's location, if applicable. Can be used to draw a map.\n        longitude:\n          type: number\n          format: double\n          example: 5.916667\n          nullable: true\n          description: Latitude of the tag's location, if applicable. Can be used to draw a map.\n        zoom_level:\n          type: integer\n          format: int32\n          example: 6\n          nullable: true\n          description: \"Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.\"\n    \n    TagRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"tags\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/TagModel'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    TagSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/TagRead'\n    \n    Transaction:\n      type: object\n      required:\n        - transactions\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        user:\n          type: integer\n          format: int32\n          example: 3\n          description: \"User ID\"\n          readOnly: true\n        error_if_duplicate_hash:\n          type: boolean\n          format: boolean\n          example: false\n          description: \"Break if the submitted transaction exists already.\"\n          readOnly: false\n        apply_rules:\n          type: boolean\n          format: boolean\n          example: false\n          description: \"Whether or not to apply rules when submitting transaction.\"\n          readOnly: false\n        group_title:\n          type: string\n          format: string\n          description: \"Title of the transaction if it has been split in more than one piece. Empty otherwise.\"\n          example: \"Split transaction title.\"\n          readOnly: false\n        transactions:\n          type: array\n          items:\n            $ref: '#/components/schemas/TransactionSplit'\n    \n    TransactionArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/TransactionRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    TransactionLink:\n      type: object\n      required:\n        - link_type_id\n        - inward_id\n        - outward_id\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        link_type_id:\n          type: integer\n          format: int32\n          example: 5\n          description: The link type ID to use. You can also use the link_type_name field.\n          writeOnly: true\n        link_type_name:\n          type: string\n          format: string\n          example: \"Is paid by\"\n          description: The link type name to use. You can also use the link_type_id field.\n          writeOnly: true\n        inward_id:\n          type: integer\n          format: int32\n          example: 131\n          description: \"The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set.\"\n        outward_id:\n          type: integer\n          format: int32\n          example: 131\n          description: \"The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set.\"\n        notes:\n          type: string\n          format: string\n          example: \"Some example notes\"\n          description: Optional. Some notes.\n    \n    TransactionLinkArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/TransactionLinkRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    TransactionLinkRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"transactionLinks\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/TransactionLink'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    TransactionLinkSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/TransactionLinkRead'\n    \n    TransactionRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"transactions\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Transaction'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    TransactionSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/TransactionRead'\n    \n    TransactionSplit:\n      type: object\n      required:\n        - amount\n        - source_id\n        - destination_id\n        - date\n        - description\n        - type\n      properties:\n        user:\n          type: integer\n          format: int32\n          example: 3\n          description: \"User ID\"\n          readOnly: true\n        transaction_journal_id:\n          type: integer\n          format: int32\n          example: 10421\n          description: |\n            ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals\n            making up the splits of the transaction.\n          readOnly: true\n        type:\n          type: string\n          format: string\n          example:  \"withdrawal\"\n          description: Type of transaction.\n          enum:\n            - withdrawal\n            - deposit\n            - transfer\n            - reconciliation\n            - opening balance\n        date:\n          type: string\n          format: date\n          example: \"2018-09-17T08:00+08:00\"\n          description: \"Date of the transaction\"\n        amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n          description: \"Amount of the transaction.\"\n        description:\n          type: string\n          format: string\n          example: \"Vegetables\"\n          description: \"Description of the transaction.\"\n        order:\n          type: integer\n          format: int32\n          example: 0\n          nullable: true\n          description: \"Order of this entry in the list of transactions.\"\n        currency_id:\n          type: integer\n          format: int32\n          example: 12\n          nullable: true\n          description: Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.\n        currency_code:\n          type: string\n          format: string\n          example: EUR\n          nullable: true\n          description: Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.\n        currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          readOnly: true\n        currency_name:\n          type: string\n          format: string\n          example: \"Euro\"\n          readOnly: true\n        currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Number of decimals used in this currency.\n          readOnly: true\n        foreign_amount:\n          type: string\n          format: amount\n          example: \"123.45\"\n          nullable: true\n          description: The amount in a foreign currency.\n        foreign_currency_id:\n          type: integer\n          format: int32\n          example: 17\n          nullable: true\n          description: Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.\n        foreign_currency_code:\n          type: string\n          format: string\n          example: USD\n          description: Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.\n          nullable: true\n        foreign_currency_symbol:\n          type: string\n          format: string\n          example: \"$\"\n          nullable: true\n          readOnly: true\n        foreign_currency_decimal_places:\n          type: integer\n          format: int32\n          example: 2\n          description: Number of decimals in the currency\n          nullable: true\n          readOnly: true\n        budget_id:\n          type: integer\n          format: int32\n          nullable: true\n          example: 4\n          description: The budget ID for this transaction.\n        budget_name:\n          type: string\n          format: string\n          example: Groceries\n          description: The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.\n          nullable: true\n          readOnly: true\n        category_id:\n          type: integer\n          format: int32\n          nullable: true\n          example: 43\n          description: The category ID for this transaction.\n        category_name:\n          type: string\n          format: string\n          example: Groceries\n          description: \"The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.\"\n        source_id:\n          type: integer\n          format: int32\n          example: 2\n          nullable: true\n          description: \"ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.\"\n        source_name:\n          type: string\n          format: string\n          example: \"Checking account\"\n          nullable: true\n          description: \"Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.\"\n        source_iban:\n          type: string\n          format: string\n          example: \"NL02ABNA0123456789\"\n          nullable: true\n          readOnly: true\n        source_type:\n          $ref: '#/components/schemas/AccountTypeProperty'\n        destination_id:\n          type: integer\n          format: int32\n          example: 2\n          nullable: true\n          description: \"ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.\"\n        destination_name:\n          type: string\n          format: string\n          example: \"Buy and Large\"\n          nullable: true\n          description: \"Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.\"\n        destination_iban:\n          type: string\n          format: string\n          example: \"NL02ABNA0123456789\"\n          nullable: true\n          readOnly: true\n        destination_type:\n          $ref: '#/components/schemas/AccountTypeProperty'\n        reconciled:\n          type: boolean\n          format: boolean\n          example: false\n          description: \"If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.\"\n        piggy_bank_id:\n          type: integer\n          format: int32\n          description: Optional. Use either this or the piggy_bank_name\n          writeOnly: true\n        piggy_bank_name:\n          type: string\n          format: string\n          description: Optional. Use either this or the piggy_bank_id\n          writeOnly: true\n        bill_id:\n          type: integer\n          format: int32\n          nullable: true\n          example: 111\n          description: Optional. Use either this or the bill_name\n        bill_name:\n          type: string\n          format: string\n          example: \"Monthly rent\"\n          nullable: true\n          description: Optional. Use either this or the bill_id\n        tags:\n          type: array\n          nullable: true\n          example:\n          description: Array of tags.\n          items:\n            type: string\n            format: string\n            description: Tag.\n            example: Barbecue preparation\n        notes:\n          type: string\n          format: string\n          example: \"Some example notes\"\n          nullable: true\n        internal_reference:\n          type: string\n          format: string\n          nullable: true\n          description: Reference to internal reference of other systems.\n        external_id:\n          type: string\n          nullable: true\n          format: string\n          description: Reference to external ID in other systems.\n        original_source:\n          type: string\n          nullable: true\n          format: string\n          description: System generated identifier for original creator of transaction.\n          readOnly: true\n        recurrence_id:\n          type: integer\n          nullable: true\n          format: int32\n          description: Reference to recurrence that made the transaction.\n          readOnly: true\n        recurrence_total:\n          type: integer\n          format: int32\n          example: 0\n          description: \"Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.\"\n          readOnly: true\n        recurrence_count:\n          type: integer\n          format: int32\n          example: 12\n          description: \"The # of the current transaction created under this recurrence.\"\n          readOnly: true\n        bunq_payment_id:\n          type: string\n          nullable: true\n          format: string\n          description: Internal ID of bunq transaction.\n        import_hash_v2:\n          type: string\n          nullable: true\n          format: string\n          description: Hash value of original import transaction (for duplicate detection).\n          readOnly: true\n        sepa_cc:\n          type: string\n          format: string\n          nullable: true\n          description: SEPA Clearing Code\n        sepa_ct_op:\n          type: string\n          format: string\n          description: SEPA Opposing Account Identifier\n        sepa_ct_id:\n          type: string\n          format: string\n          nullable: true\n          description: SEPA end-to-end Identifier\n        sepa_db:\n          type: string\n          format: string\n          nullable: true\n          description: SEPA mandate identifier\n        sepa_country:\n          type: string\n          nullable: true\n          format: string\n          description: SEPA Country\n        sepa_ep:\n          type: string\n          nullable: true\n          format: string\n          description: SEPA External Purpose indicator\n        sepa_ci:\n          type: string\n          format: string\n          nullable: true\n          description: SEPA Creditor Identifier\n        sepa_batch_id:\n          type: string\n          format: string\n          nullable: true\n          description: SEPA Batch ID\n        interest_date:\n          type: string\n          format: date\n          nullable: true\n        book_date:\n          type: string\n          format: date\n          nullable: true\n        process_date:\n          type: string\n          format: date\n          nullable: true\n        due_date:\n          type: string\n          format: date\n          nullable: true\n        payment_date:\n          type: string\n          format: date\n          nullable: true\n        invoice_date:\n          type: string\n          format: date\n          nullable: true\n    \n    TransactionTypeFilter:\n      type: string\n      enum:\n        - all\n        - withdrawal\n        - withdrawals\n        - expense\n        - deposit\n        - deposits\n        - income\n        - transfer\n        - transfers\n        - opening_balance\n        - reconciliation\n        - special\n        - specials\n        - default\n    \n    User:\n      title: A single user\n      type: object\n      required:\n        - email\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        email:\n          type: string\n          format: email\n          example: \"james@firefly-iii.org\"\n          description: The new users email address.\n        blocked:\n          type: boolean\n          format: boolean\n          example: false\n          description: Boolean to indicate if the user is blocked.\n        blocked_code:\n          type: string\n          format: string\n          nullable: true\n          example: \"email_changed\"\n          description: If you say the user must be blocked, this will be the reason code.\n          enum:\n          - email_changed\n        role:\n          type: string\n          format: string\n          nullable: true\n          example: \"owner\"\n          description: Role for the new user. Can be empty or omitted.\n          enum:\n          - owner\n          - demo\n    \n    UserArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    UserRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"users\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/User'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    UserSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/UserRead'\n    \n    ValidationError:\n      type: object\n      properties:\n        message:\n          type: string\n          format: string\n          example: \"The given data was invalid.\"\n        errors:\n          type: object\n          properties:\n            field1:\n              type: array\n              items:\n                type: string\n                format: string\n            field2:\n              type: array\n              items:\n                type: string\n                format: string\n    \n    Webhook:\n      title: A single webhook\n      type: object\n      required:\n        - trigger\n        - response\n        - delivery\n        - url\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2018-09-17T12:46:47+01:00\"\n          readOnly: true\n        active:\n          type: boolean\n          format: boolean\n          example: false\n          description: Boolean to indicate if the webhook is active\n        title:\n          type: string\n          format: string\n          example: \"Update magic mirror on new transaction\"\n          description: A title for the webhook for easy recognition.\n        secret:\n          type: string\n          format: string\n          example: \"iMLZLtLx2JHWhK9Dtyuoqyir\"\n          readOnly: true\n          description: A 24-character secret for the webhook. It's generated by Firefly III when saving a new webhook.\n        trigger:\n          type: string\n          format: string\n          nullable: false\n          example: \"TRIGGER_DESTROY_TRANSACTION\"\n          description: The trigger for the webhook.\n          enum:\n          - TRIGGER_STORE_TRANSACTION\n          - TRIGGER_UPDATE_TRANSACTION\n          - TRIGGER_DESTROY_TRANSACTION\n        response:\n          type: string\n          format: string\n          nullable: false\n          example: \"RESPONSE_TRANSACTIONS\"\n          description: Indicator for what Firefly III will deliver to the webhook URL.\n          enum:\n          - RESPONSE_TRANSACTIONS\n          - RESPONSE_ACCOUNTS\n          - RESPONSE_NONE\n        delivery:\n          type: string\n          format: string\n          nullable: false\n          example: \"DELIVERY_JSON\"\n          description: Format of the delivered response.\n          enum:\n          - DELIVERY_JSON\n        url:\n          type: string\n          format: string\n          example: \"https://example.com\"\n          readOnly: false\n          description: The URL of the webhook. Has to start with `https`.\n    WebhookArray:\n      type: object\n      required:\n        - data\n        - meta\n        - links\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/WebhookRead'\n        meta:\n          $ref: '#/components/schemas/Meta'\n        links:\n          $ref: '#/components/schemas/PageLink'\n    \n    WebhookRead:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - links\n      properties:\n        type:\n          type: string\n          format: string\n          example: \"webhooks\"\n          description: \"Immutable value\"\n        id:\n          type: integer\n          format: int32\n          example: 2\n        attributes:\n          $ref: '#/components/schemas/Webhook'\n        links:\n          $ref: '#/components/schemas/ObjectLink'\n    \n    WebhookSingle:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: '#/components/schemas/WebhookRead'\n    \n  securitySchemes:\n    firefly_iii_auth:\n      type: oauth2\n      description: Default OAuth2 flow\n      flows:\n        authorizationCode:\n          authorizationUrl: https://demo.firefly-iii.org/oauth/authorize\n          tokenUrl: https://demo.firefly-iii.org/oauth/token\n          refreshUrl: https://demo.firefly-iii.org/oauth/token\n          scopes: {}\nsecurity:\n  - firefly_iii_auth: []\n",
      "url": "https://api-docs.firefly-iii.org/firefly-iii-1.5.0.yaml",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToCSharpClient": {
      "clientBaseClass": "BaseClient",
      "configurationClass": "FireflyClientConfig",
      "generateClientClasses": true,
      "generateClientInterfaces": false,
      "clientBaseInterface": null,
      "injectHttpClient": false,
      "disposeHttpClient": true,
      "protectedMethods": [],
      "generateExceptionClasses": true,
      "exceptionClass": "ApiException",
      "wrapDtoExceptions": true,
      "useHttpClientCreationMethod": false,
      "httpClientType": "System.Net.Http.HttpClient",
      "useHttpRequestMessageCreationMethod": false,
      "useBaseUrl": true,
      "generateBaseUrlProperty": true,
      "generateSyncMethods": false,
      "generatePrepareRequestAndProcessResponseAsAsyncMethods": false,
      "exposeJsonSerializerSettings": false,
      "clientClassAccessModifier": "public",
      "typeAccessModifier": "public",
      "generateContractsOutput": false,
      "contractsNamespace": null,
      "contractsOutputFilePath": null,
      "parameterDateTimeFormat": "s",
      "parameterDateFormat": "yyyy-MM-dd",
      "generateUpdateJsonSerializerSettingsMethod": true,
      "useRequestAndResponseSerializationSettings": false,
      "serializeTypeInformation": false,
      "queryNullValue": "",
      "className": "{controller}Client",
      "operationGenerationMode": "MultipleClientsFromOperationId",
      "additionalNamespaceUsages": [],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": false,
      "generateJsonMethods": false,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "FireflyIII",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.ICollection",
      "arrayInstanceType": "System.Collections.ObjectModel.Collection",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": false,
      "generateNullableReferenceTypes": false,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "FireflyClient.cs",
      "newLineBehavior": "Auto"
    }
  }
}